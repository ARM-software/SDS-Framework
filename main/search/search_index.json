{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SDS-Framework This documentation explains the usage of the SDS-Framework for developing DSP, ML, or Edge AI algorithms. Target Audience This user's guide assumes basic knowledge about Cortex-M software development. It is written for embedded software developers that work with C/C++ compiler toolchains and utilize microcontroller devices with Cortex-M processors and Ethos-U NPUs. Manual Chapters Overview explains the of features of the SDS-Framework and outlines the possibilities. Theory of Operation explains data stream recording and playback. SDS Interface describes the various interfaces (USB, Socket, File System) for connecting to the target. Examples lists the examples that are available. Utilities explains Python based utilities that operate with SDS data files for converting, viewing, recording, and playback. API Modules describes the C interface of the SDS functions that may be used in the target system. Revision History Version Description 1.1.0 Initial release for SDS-Framework 1.1.0","title":"Home"},{"location":"#sds-framework","text":"This documentation explains the usage of the SDS-Framework for developing DSP, ML, or Edge AI algorithms.","title":"SDS-Framework"},{"location":"#target-audience","text":"This user's guide assumes basic knowledge about Cortex-M software development. It is written for embedded software developers that work with C/C++ compiler toolchains and utilize microcontroller devices with Cortex-M processors and Ethos-U NPUs.","title":"Target Audience"},{"location":"#manual-chapters","text":"Overview explains the of features of the SDS-Framework and outlines the possibilities. Theory of Operation explains data stream recording and playback. SDS Interface describes the various interfaces (USB, Socket, File System) for connecting to the target. Examples lists the examples that are available. Utilities explains Python based utilities that operate with SDS data files for converting, viewing, recording, and playback. API Modules describes the C interface of the SDS functions that may be used in the target system.","title":"Manual Chapters"},{"location":"#revision-history","text":"Version Description 1.1.0 Initial release for SDS-Framework 1.1.0","title":"Revision History"},{"location":"examples/","text":"Examples SDS examples applications are provided in a separate GitHub repository and shows the usage of the SDS-Framework. The examples use csolution project layers to simplify targeting to different hardware boards. The Sensor Layer implements a data streaming interface to is described in the section Overview . It is user code that is application specific. The Layer Type: SDS_Recorder connects the data streams to the SDS files. There are various ready to use implementations available as outlined in the table below. Several layer implementations use the MDK-Middleware for communication. Layer Type: SDS_Recorder Description SDS_Rec_Network.clayer.yml Connects via TCP/IP Network Ethernet to SDSIO Server. SDS_Rec_USB.clayer.yml Connects via USB Device VCom to SDSIO Server. SDS_Rec_FileSystem.clayer.yml Connects via FileSystem to a memory card. The Layer Type: Board is a standard board layer that provides a communication interface ( CMSIS_ETH , CMSIS_USB_Device ), a sensor interface ( I2C , SPI ), and a CMSIS_VIO interface for SDS recorder control. Other variants may have Audio or Video interfaces. Connections help to identify the compatible software layers. The CMSIS-Toolbox section Reference Applications for more information about the project structure.","title":"Examples"},{"location":"examples/#examples","text":"SDS examples applications are provided in a separate GitHub repository and shows the usage of the SDS-Framework. The examples use csolution project layers to simplify targeting to different hardware boards. The Sensor Layer implements a data streaming interface to is described in the section Overview . It is user code that is application specific. The Layer Type: SDS_Recorder connects the data streams to the SDS files. There are various ready to use implementations available as outlined in the table below. Several layer implementations use the MDK-Middleware for communication. Layer Type: SDS_Recorder Description SDS_Rec_Network.clayer.yml Connects via TCP/IP Network Ethernet to SDSIO Server. SDS_Rec_USB.clayer.yml Connects via USB Device VCom to SDSIO Server. SDS_Rec_FileSystem.clayer.yml Connects via FileSystem to a memory card. The Layer Type: Board is a standard board layer that provides a communication interface ( CMSIS_ETH , CMSIS_USB_Device ), a sensor interface ( I2C , SPI ), and a CMSIS_VIO interface for SDS recorder control. Other variants may have Audio or Video interfaces. Connections help to identify the compatible software layers. The CMSIS-Toolbox section Reference Applications for more information about the project structure.","title":"Examples"},{"location":"overview/","text":"Overview The Synchronous Data Stream (SDS) Framework implements a data stream management, provides methods and utilities for developing and optimizing embedded applications that use DSP, ML, or Edge AI algorithms. The SDS-Framework allows you to capture simultaneously multiple data streams from different sources (sensors, audio, and video inputs) or the results of algorithms in real-time directly in target hardware. These data streams are stored in files. The captured data streams are useful in various steps of the development cycle, for example to: Validate physical input signals from sensors or output of algorithms. Provide input data to Digital Signal Processing (DSP) development tools such as filter designers. Provide input data to ML/AI development systems for model classification, training, and performance optimization. Provide input data for simulation using Arm Virtual Hardware (AVH-FVP) models for testing and validation. Data Capturing and Playback The following diagram shows the data capturing in a microcontroller system using a network communication and the playback in simulation using Arm Virtual Hardware - Fixed Virtual Platform . The SDS Recorder or Playback Interface is integrated into the target application and runs on the microcontroller. It enables data streaming into SDS data files via various interfaces such as Ethernet, UART, USB, or File System. The I/O implementation included in SDS utilizes the MDK-Middleware , however custom interfaces to other middleware or different communication channels can also be used. The SDSIO Server running on a host computer captures the recorded data stream and stores it in SDS data files. Each recording creates one set of SDS data files that are indicated by a sequential number. The SDS data files are in binary format and may be described using a YAML metadata file . With this information, other tools can utilize the content of the SDS data files as shown in the picture below. In a simulation environment, the SDS Playback Interface streams the SDS data files back to the algorithm under test. With this interface, the algorithm receives the same data stream as in the physical hardware. The setup can therefore be used for validation, performance optimizations, and runs even in CI environments for test automation.","title":"Overview"},{"location":"overview/#overview","text":"The Synchronous Data Stream (SDS) Framework implements a data stream management, provides methods and utilities for developing and optimizing embedded applications that use DSP, ML, or Edge AI algorithms. The SDS-Framework allows you to capture simultaneously multiple data streams from different sources (sensors, audio, and video inputs) or the results of algorithms in real-time directly in target hardware. These data streams are stored in files. The captured data streams are useful in various steps of the development cycle, for example to: Validate physical input signals from sensors or output of algorithms. Provide input data to Digital Signal Processing (DSP) development tools such as filter designers. Provide input data to ML/AI development systems for model classification, training, and performance optimization. Provide input data for simulation using Arm Virtual Hardware (AVH-FVP) models for testing and validation.","title":"Overview"},{"location":"overview/#data-capturing-and-playback","text":"The following diagram shows the data capturing in a microcontroller system using a network communication and the playback in simulation using Arm Virtual Hardware - Fixed Virtual Platform . The SDS Recorder or Playback Interface is integrated into the target application and runs on the microcontroller. It enables data streaming into SDS data files via various interfaces such as Ethernet, UART, USB, or File System. The I/O implementation included in SDS utilizes the MDK-Middleware , however custom interfaces to other middleware or different communication channels can also be used. The SDSIO Server running on a host computer captures the recorded data stream and stores it in SDS data files. Each recording creates one set of SDS data files that are indicated by a sequential number. The SDS data files are in binary format and may be described using a YAML metadata file . With this information, other tools can utilize the content of the SDS data files as shown in the picture below. In a simulation environment, the SDS Playback Interface streams the SDS data files back to the algorithm under test. With this interface, the algorithm receives the same data stream as in the physical hardware. The setup can therefore be used for validation, performance optimizations, and runs even in CI environments for test automation.","title":"Data Capturing and Playback"},{"location":"sds_interface/","text":"SDS Interface The SDSIO components offer flexible recorder and playback interfaces. You may choose between these interface components that are stored in the folder ./sds/sdsio . These interfaces can be accessed as CMSIS software components for integration into the target system: - component: SDS:IO:Socket # Socket Interface (Ethernet or WiFi) - component: SDS:IO:VCOM&MDK USB # USB Interface - component: SDS:IO:Serial&CMSIS USART # USART Interface - component: SDS:IO:File System&MDK FS # Memory card - component: SDS:IO:File System&Semihosting # Simulation or Debugger via Semihosting interface - component: SDS:IO:Custom # Source code template for custom implementation To simplify usage further, the following pre-configured SDS interface layers in csolution project format are available. These connect via various interfaces to the SDSIO server that for read/write access to SDS data files. Ethernet Interface using the MDK-Middleware Network components. USB Interface using the MDK-Middleware USB components. Layer: Network/SDS_Interface The Network/SDS_Interface.clayer is configured for recording and playback via Ethernet interface. It is using the MDK-Middleware Network component. Layer: USB/SDS_Interface The USB/SDS_Interface.clayer is configured for recording and playback via Ethernet interface. It is using the MDK-Middleware Network component.","title":"SDS Interface"},{"location":"sds_interface/#sds-interface","text":"The SDSIO components offer flexible recorder and playback interfaces. You may choose between these interface components that are stored in the folder ./sds/sdsio . These interfaces can be accessed as CMSIS software components for integration into the target system: - component: SDS:IO:Socket # Socket Interface (Ethernet or WiFi) - component: SDS:IO:VCOM&MDK USB # USB Interface - component: SDS:IO:Serial&CMSIS USART # USART Interface - component: SDS:IO:File System&MDK FS # Memory card - component: SDS:IO:File System&Semihosting # Simulation or Debugger via Semihosting interface - component: SDS:IO:Custom # Source code template for custom implementation To simplify usage further, the following pre-configured SDS interface layers in csolution project format are available. These connect via various interfaces to the SDSIO server that for read/write access to SDS data files. Ethernet Interface using the MDK-Middleware Network components. USB Interface using the MDK-Middleware USB components.","title":"SDS Interface"},{"location":"sds_interface/#layer-networksds_interface","text":"The Network/SDS_Interface.clayer is configured for recording and playback via Ethernet interface. It is using the MDK-Middleware Network component.","title":"Layer: Network/SDS_Interface"},{"location":"sds_interface/#layer-usbsds_interface","text":"The USB/SDS_Interface.clayer is configured for recording and playback via Ethernet interface. It is using the MDK-Middleware Network component.","title":"Layer: USB/SDS_Interface"},{"location":"theory/","text":"Theory of Operation The SDS Framework enables to record and playback one or more data streams to an application that is under development as shown in the diagram below. With the SDSIO Interface the data streams are connected to SDS data files. The file storage can be either embedded within the system and access by a file system or external on a host computer and accessed by a communication interface such as Ethernet or USB. The DSP or ML algorithms that are tested operate on blocks and are executed periodically. This documentation uses these terms: Data Block : is a set of input or output data which is processed in one step by a DSP or ML compute note. Block size : is the number of bytes of a data block. Interval : is the periodic time interval that the compute node executes. The core of the SDS-Framework is a circular buffer handling ( sds.c/h ) that is controlled by the Recorder/Player interface functions ( sdsRec.c/h / sdsPlay.c/h ). This circular buffer is the queue for the file I/O communication ( sdsio.c/h ). Using the Recorder/Player functions, the data stream under development may read and write data streams as shown in the diagram above. Usage The following diagram shows the usage of the SDS Recorder and Player functions (executed in sdsRecPlayThread ). The sdsControlThread controls the overall execution. AlgorithmThread is the thread that executes Signal Conditioning (SC) and ML Model. sequenceDiagram participant sdsControlThread participant sdsRecPlayThread participant AlgorithmThread sdsControlThread->>sdsRecPlayThread: sdsPlayOpen `SCinput` sdsControlThread->>sdsRecPlayThread: sdsRecOpen `SCoutput` sdsControlThread->>sdsRecPlayThread: sdsRecOpen `MLoutput` sdsControlThread->>AlgorithmThread: Activate Algorithm Activate AlgorithmThread loop periodic sdsRecPlayThread->>AlgorithmThread: sdsPlayRead `SCinput` (with Timestamp) Note over AlgorithmThread: Execute Signal Conditioning AlgorithmThread->>sdsRecPlayThread: sdsRecWrite `SCoutput` Note over AlgorithmThread: Execute ML Model AlgorithmThread->>sdsRecPlayThread: sdsRecWrite `MLoutput` end sdsControlThread->>AlgorithmThread: Deactivate Algorithm Deactivate AlgorithmThread sdsControlThread->>sdsRecPlayThread: sdsPlayClose `SCinput` sdsControlThread->>sdsRecPlayThread: sdsRecClose `SCoutput` sdsControlThread->>sdsRecPlayThread: sdsRecClose `MCoutput` SDS Data Files Each data stream is stored in a separate SDS data file. In the diagram below SCinput.0.sds is the input to Signal Conditioning, SCoutput.0.sds is the output of Signal Conditioning, and MLoutput.0.sds is the output of the ML Model. Each execution of the algorithm is represented in a data block with a timestamp . The timestamp allows to correlate the blocks of different streams. In the above example, all blocks of one algorithm execution have the same timestamp value. Each call to the function sdsRecWrite writes one data block. Each call to the function sdsPlayRead reads one data block. Filenames SDS data filenames use the following file format: <name>.<file-index>.sds . <name> is the base file name of the SDS data file. The <file-index> is a sequential number starting from 0 . The function sdsRecOpen gets the <name> as a parameter. When connected to a file system (for example the SDSIO-Server ), existing files starting with <file-index>=\"0\" are iterated. The first available <file-index> that does not exist will used as filename to record data. For example, if the file SensorX.10.sds already exists, the filename SensorX.11.sds will be used. The function sdsPlayOpen gets the <name> as a parameter. When connected to a file system (for example using the SDSIO-Server ), the first call uses the <file-index>=\"0\" . Each call to sdsPlayOpen increments the <file-index> . Timestamp The timestamp is a 32-bit unsigned value and is used for: Alignment of different data streams that have the same timestamp value. Order of the SDS data files captured during execution. Combining multiple SDS file records with the same timestamp value. The same timestamp connects different SDS file records. It is therefore useful to use the same timestamp for the recording of one iteration of a DSP or ML algorithm. In most cases the granularity of an RTOS tick (typically 1ms) is a good choice for a timestamp value. File Format The SDS Framework uses a binary data file format to store the individual data streams. It supports the recording and playback of multiple data streams that may have jitters. Therefore each stream contains timestamp information that allows to correlate the data streams as it is for example required in a sensor fusion application. The binary data format (stored in *.<n>.sds data files) has a record structure with a variable size. Each record has the following format: timestamp : record timestamp in tick-frequency (32-bit unsigned integer, little endian) data size : number of data bytes in the record (32-bit unsigned integer, little endian) binary data : SDS stream (little endian, no padding) as described with the *.sds.yml file. YAML Metadata Format The content of each data stream may be described in a YAML metadata file that is created by the user. The following section defines the YAML format of this metadata file. The file sds.schema.json is a schema description of the SDS Format Description. sds: Start of the SDS Format Description name: Name of the Synchronous Data Stream (SDS) description: Additional descriptive text (optional) frequency: Capture frequency of the SDS tick-frequency: Tick frequency of the timestamp value (optional); default: 1000 for 1 milli-second interval content: List of values captured (see below) content: List of values captured (in the order of the data file) - value: Name of the value type: Data type of the value offset: Offset of the value (optional); default: 0 scale: Scale factor of the value (optional); default: 1.0 unit: Physical unit of the value (optional); default: no units Example This example defines a data stream with the name \"sensorX\" that contains the values of a gyroscope, temperature sensor, and additional raw data (that are not further described). The binary data that are coming form this sensors are stored in data files with the following file format: <sensor-name>.<file-index>.sds . In this example the files names could be: sensorX.0.sds # capture 0 sensorX.1.sds # capture 1 The following sensorX.sds.yml provides the format description of the SDS sensorX binary data files and maybe used by data conversion utilities and data viewers. sds: # describes a synchronous data stream name: sensorX # user defined name description: Gyroscope stream with 1KHz, plus additional user data frequency: 1000 content: - value: x # Value name is 'x' type: uint16_t # stored using a 16-bit unsigned int scale: 0.2 # value is scaled by 0.2 unit: dps # base unit of the value - value: y type: uint16_t scale: 0.2 unit: dps - value: z type: uint16_t unit: dps # scale 1.0 is default - value: temp type: float unit: degree Celsius - value: raw type: uint16_t # raw data, no scale or unit given - value: flag type: uint32_t:1 # a single bit stored in a 32-bit int Code Example The following code snippets show the usage of the Recorder Interface . In this case an accelerometer data stream is recorded. // *** variable definitions *** struct { // sensor data stream format uint16_t x; uint16_t y; uint16_t z; } accelerometer [30]; // number of samples in one data stream record sdsRecId_t *accel_id, // data stream id uint8_t accel_buf[(sizeof(accel_buf)*2)+0x800]; // data stream buffer for circular buffer handling : // *** function calls *** sdsRecInit(NULL); // init SDS Recorder : // open data stream for recording accel_id = sdsRecOpen(\"Accel\", accel_buf, sizeof(accel_buf), 2*(sizeof(accelerometer)); : // write data in accelerometer buffer with timestamp from RTOS kernel. timestamp = osKernelGetTickCount(); n = sdsRecWrite(accel_id, timestamp, accelerometer, sizeof(accelerometer)); if (n != sizeof(accelerometer)) { ... // unexpected size returned, error handling } : sdsRecClose (accel_id); // close data stream Buffer Size The size of the data stream buffer depends on several factors such as: the communication interface used as the technology may impose certain buffer sizes to maximize the transfer rate. the size of the data stream as it is recommended that the buffer is at least three the size of a single data stream. the frequency of the algorithm execution. Fast execution speeds may require a larger buffer. A a guideline, the buffer size should be 2 times the block size + 2KB. As a minimum 0x1000 (4 KB) is recommended. SDSIO Server Protocol The SDSIO Server uses a simple protocol for data exchange between a Host computer and the embedded target that integrates an SDSIO Interface . The protocol assumes that the correct communication to the server is already ensured by the underlying technology (TCP/IP or USB) and therefore no extra check is implemented. The following conventions describe the command semantic used in the following documentation\" Symbol Description > Prefix indicating the direction: Command from target to Host. < Prefix indicating the direction: Response from Host to target. WORD 32-bit value (low byte first). **** The field above has exactly one occurrence. ++++ The field above has a variable length. Commands: Commands are send from the embedded target to the Host computer that is running the SDSIO Server. ID Name Description 1 SDSIO_CMD_OPEN Open a SDS data file 2 SDSIO_CMD_CLOSE Close a SDS data file 3 SDSIO_CMD_WRITE Write to SDS data file 4 SDSIO_CMD_READ Read from SDS data file 5 SDSIO_CMD_EOS End of Stream Each Command starts with a Header (4 Words) and optional data with variable length. Depending on the Command, the SDSIO Server replies with a Response that repeats the Header and delivers additional data. SDSIO_CMD_OPEN The Command ID=1 SDSIO_CMD_OPEN opens an SDS data file on the Host computer. SDS data filenames use the following file format: <name>.<file-index>.sds . Name is the base file name of the SDS data file. Len of Name is the size of the string in bytes. <file-index> is a sequential number starting from 0 . Mode defines read (value=0) or write (value=1) operation. For write , the server inserts the next available <file-index> number that does not exist yet (if Name.3.sds exists, the server creates Name.4.sds ). For read the server maintains a list of Names that where previously used. When a Name was not used before it opens <file-index>=0 , i.e. Name.0.sds . | WORD | WORD **| WORD | WORD *******|++++++| > 1 | 0 | Mode | Len of Name | Name | |******|********|******|*************|++++++| The Response ID=1 SDSIO_CMD_OPEN provides a Handle that is used to identify the file in subsequent commands. | WORD | WORD **| WORD | WORD *******| < 1 | Handle | Mode | 0 | |******|********|******|*************| SDSIO_CMD_CLOSE The Command ID=2 SDSIO_CMD_CLOSE closes an SDS data file on the Host computer. The Handle is the identifier obtained with SDSIO_CMD_OPEN . There is no Response from the SDSIO Server on this command. | WORD | WORD | WORD | WORD | > 2 | Handle | 0 | 0 | |******|********|******|******| SDSIO_CMD_WRITE The Command ID=3 SDSIO_CMD_WRITE writes data to an SDS data file on the Host computer. The Handle is the identifier obtained with SDSIO_CMD_OPEN . Size is the Data size in bytes. There is no Response from the SDSIO Server on this command. | WORD | WORD | WORD | WORD |++++++| > 3 | Handle | 0 | Size | Data | |******|********|******|******|++++++| SDSIO_CMD_READ The Command ID=4 SDSIO_CMD_READ reads data from an SDS data file on the Host computer. The Handle is the identifier obtained with SDSIO_CMD_OPEN . Size are the number of bytes that should be read. | WORD | WORD | WORD | WORD | > 4 | Handle | Size | 0 | |******|********|******|******| The Response ID=4 SDSIO_CMD_READ provides the data read from an SDS data file on the HOST computer. Size is the Data size in bytes that is read. | WORD | WORD | WORD | WORD |++++++| < 4 | Handle | 0 | Size | Data | |******|********|******|******|++++++| SDSIO_CMD_EOS The Command ID=5 SDSIO_CMD_EOS checks if the end of file is reached. The Handle is the identifier obtained with SDSIO_CMD_OPEN . | WORD | WORD | WORD | WORD | > 5 | Handle | 0 | 0 | |******|********|******|******| The Response ID=5 SDSIO_CMD_EOS returs the Status with nonzero = end of stream, else 0 | WORD | WORD | WORD | WORD | < 5 | Handle | Status | 0 | |******|********|********|******| ToDo: I don't understand why this command is needed as SDSIO_CMD_READ returns indirectly this status already. Also the nonzero above needs work. SDSIO Message Sequence This is the message sequence of the SDS DataTest example when connected to MDK-Middleware Ethernet. It contains the following threads that executes on the target. Control: Overall execution Control Algorithm: Algorithm under test Recorder: SDS Recorder thread (sdsRecThread) Playback: SDS Playback thread (sdsPlayThread) The Server is the SDSIO Server executing on the target system. ToDo rework this diagram sequenceDiagram participant Control participant Algorithm create participant Recorder as SDS Recorder participant Server as SDSIO Server Control->>Recorder: sdsRecInit Note over Control: sdsRecOpen Control->>Server: SDSIO_CMD_OPEN activate Server Server-->>Control: Response activate Algorithm loop periodic Note over Algorithm: sdsRecWrite Algorithm->>Recorder: Threshold Trigger loop send all data Recorder->>Server: SDSIO_CMD_WRITE end end deactivate Algorithm Note over Control: sdsRecClose Control->>Recorder: Close Trigger loop send all data Recorder->>Server: SDSIO_CMD_WRITE end Recorder->>Control: Close Confirm Control->>Server: SDSIO_CMD_CLOSE deactivate Server ToDo: create similar diagram for Playback should Playback and Record use the same Thread? How is the buffer filled on PlayOpen? document control blocks in sds.c, sds_rec.c, and sds_play.c (comments might be sufficient) How does Threshold work? when Threshold is reach, the write operation writes the whole buffer. The transport layer (TCP/IP) may need to split this into multiple packs. Should size be optimized for transport layer? This writes all buffers https://github.com/ARM-software/SDS-Framework/blob/main/sds/source/sds_rec.c#L157 until empty. When Recorder is same priority as Algorithm, Algorithm might not be executed for quite a while. sds.c generates detailed events (are they documented?) but sds_rec.c does not really use this information Threshold event is only set when complete write was possible, is this correct? https://github.com/ARM-software/SDS-Framework/blob/main/sds/source/sds_rec.c#L298 ToDo review this section Guidelines for Stream Buffer sizing and Threshold settings Overview The SDS Recorder/Player uses memory buffers to manage data recording and playback efficiently. Proper buffer and threshold configurations optimize performance by balancing data production, consumption, and system resource utilization. Stream Buffer Size The size of memory buffers affects the balance between data production and consumption. The absolute minimum stream buffer size should be large enough to store one maximum record along with its header (8 bytes) . The recommended stream buffer size should be large enough to store at least two maximum records along with headers (8 bytes per record) and can be rounded up for convenience. The record size generally corresponds to the data size used by the underlying technology. For example, in typical ML applications , the record size should ideally match the data slice required by the DSP process . If sufficient RAM is available, increasing the buffer size can improve performance. Threshold Settings for SDS Recorder/Player Function of Thresholds For the SDS Recorder: Determines when data writing to the I/O begins. For the SDS Player: Determines when data reading from the I/O begins. The recommended threshold setting is half of the stream buffer size , enabling a double-buffering technique where one half of the buffer is transferred while the other half continues to fill or be consumed. A well-optimized system ensures timely data transfer over the I/O: For the Recorder : Previously acquired data must be transferred before the remaining of the buffer fills with new data. For the Player : New playback data should be transferred before the previously transferred playback data is consumed. Impact on System Performance The threshold setting directly affects system performance, as I/O transfers temporarily occupy the CPU . During these operations, other system processes may experience limited CPU availability. If the system requires additional CPU resources for other tasks, adjustments can be made by: Increasing the priority of critical threads . Reducing the threshold setting , which shortens the duration of each transfer but increases the frequency of transfers. Note: Thresholds operate based on discrete record sizes. A threshold is only triggered when a write or read operation surpasses (for write) or falls below (for read) the set limit. When handling large records, breaking them into smaller chunks may be necessary to optimize system performance. Additional Settings Affecting I/O Bandwidth Several additional factors influence I/O bandwidth, including: Temporary Recorder/Player buffer size (configured in the sds_rec_config.h / sds_play_config.h files). I/O low-level buffering . Optimizing I/O Buffering For optimal performance , the temporary Recorder/Player buffer size should match the I/O low-level buffer size . For some interfaces, the I/O low-level buffer size can be configurable, for others, it is fixed. Example: The USB Virtual COM interface allows I/O low-level buffer size configuration. It is recommended to set this buffer size as a multiple of the bulk endpoint maximum packet size (512 bytes for USB high-speed connections). Example configurations for typical ML use cases ML Use Case DSP slice Calculation Buffer Size Threshold Motion detection 125 accelerometer samples 2 \u00d7 [(125 samples \u00d7 3 axes \u00d7 4 bytes per axis) + 8] = 3016 -> rounded to 3072 3072 bytes 1536 Keyword spotting 250 ms of audio data samples (16kHz) 2 \u00d7 [(4,000 audio samples \u00d7 4 bytes per sample) + 8] = 32,016 -> rounded to 32,768 32768 bytes 16384 Object detection 1 picture (320x320) 2 \u00d7 [(320 \u00d7 320 pixels \u00d7 4 bytes per pixel) + 8] = 819,216 819216 bytes 409608 Best Practices Summary Ensure buffer sizes align with DSP ata slice sizes for efficient ML processing. Use double-buffering to enhance I/O efficiency. Adjust threshold settings to balance performance and CPU usage. Match temporary buffer sizes to I/O low-level buffer sizes where possible. By following these guidelines, the SDS Recorder/Player can be configured efficiently to balance performance, latency, and CPU utilization , ensuring smooth data processing and system stability.","title":"Theory of Operation"},{"location":"theory/#theory-of-operation","text":"The SDS Framework enables to record and playback one or more data streams to an application that is under development as shown in the diagram below. With the SDSIO Interface the data streams are connected to SDS data files. The file storage can be either embedded within the system and access by a file system or external on a host computer and accessed by a communication interface such as Ethernet or USB. The DSP or ML algorithms that are tested operate on blocks and are executed periodically. This documentation uses these terms: Data Block : is a set of input or output data which is processed in one step by a DSP or ML compute note. Block size : is the number of bytes of a data block. Interval : is the periodic time interval that the compute node executes. The core of the SDS-Framework is a circular buffer handling ( sds.c/h ) that is controlled by the Recorder/Player interface functions ( sdsRec.c/h / sdsPlay.c/h ). This circular buffer is the queue for the file I/O communication ( sdsio.c/h ). Using the Recorder/Player functions, the data stream under development may read and write data streams as shown in the diagram above.","title":"Theory of Operation"},{"location":"theory/#usage","text":"The following diagram shows the usage of the SDS Recorder and Player functions (executed in sdsRecPlayThread ). The sdsControlThread controls the overall execution. AlgorithmThread is the thread that executes Signal Conditioning (SC) and ML Model. sequenceDiagram participant sdsControlThread participant sdsRecPlayThread participant AlgorithmThread sdsControlThread->>sdsRecPlayThread: sdsPlayOpen `SCinput` sdsControlThread->>sdsRecPlayThread: sdsRecOpen `SCoutput` sdsControlThread->>sdsRecPlayThread: sdsRecOpen `MLoutput` sdsControlThread->>AlgorithmThread: Activate Algorithm Activate AlgorithmThread loop periodic sdsRecPlayThread->>AlgorithmThread: sdsPlayRead `SCinput` (with Timestamp) Note over AlgorithmThread: Execute Signal Conditioning AlgorithmThread->>sdsRecPlayThread: sdsRecWrite `SCoutput` Note over AlgorithmThread: Execute ML Model AlgorithmThread->>sdsRecPlayThread: sdsRecWrite `MLoutput` end sdsControlThread->>AlgorithmThread: Deactivate Algorithm Deactivate AlgorithmThread sdsControlThread->>sdsRecPlayThread: sdsPlayClose `SCinput` sdsControlThread->>sdsRecPlayThread: sdsRecClose `SCoutput` sdsControlThread->>sdsRecPlayThread: sdsRecClose `MCoutput`","title":"Usage"},{"location":"theory/#sds-data-files","text":"Each data stream is stored in a separate SDS data file. In the diagram below SCinput.0.sds is the input to Signal Conditioning, SCoutput.0.sds is the output of Signal Conditioning, and MLoutput.0.sds is the output of the ML Model. Each execution of the algorithm is represented in a data block with a timestamp . The timestamp allows to correlate the blocks of different streams. In the above example, all blocks of one algorithm execution have the same timestamp value. Each call to the function sdsRecWrite writes one data block. Each call to the function sdsPlayRead reads one data block.","title":"SDS Data Files"},{"location":"theory/#filenames","text":"SDS data filenames use the following file format: <name>.<file-index>.sds . <name> is the base file name of the SDS data file. The <file-index> is a sequential number starting from 0 . The function sdsRecOpen gets the <name> as a parameter. When connected to a file system (for example the SDSIO-Server ), existing files starting with <file-index>=\"0\" are iterated. The first available <file-index> that does not exist will used as filename to record data. For example, if the file SensorX.10.sds already exists, the filename SensorX.11.sds will be used. The function sdsPlayOpen gets the <name> as a parameter. When connected to a file system (for example using the SDSIO-Server ), the first call uses the <file-index>=\"0\" . Each call to sdsPlayOpen increments the <file-index> .","title":"Filenames"},{"location":"theory/#timestamp","text":"The timestamp is a 32-bit unsigned value and is used for: Alignment of different data streams that have the same timestamp value. Order of the SDS data files captured during execution. Combining multiple SDS file records with the same timestamp value. The same timestamp connects different SDS file records. It is therefore useful to use the same timestamp for the recording of one iteration of a DSP or ML algorithm. In most cases the granularity of an RTOS tick (typically 1ms) is a good choice for a timestamp value.","title":"Timestamp"},{"location":"theory/#file-format","text":"The SDS Framework uses a binary data file format to store the individual data streams. It supports the recording and playback of multiple data streams that may have jitters. Therefore each stream contains timestamp information that allows to correlate the data streams as it is for example required in a sensor fusion application. The binary data format (stored in *.<n>.sds data files) has a record structure with a variable size. Each record has the following format: timestamp : record timestamp in tick-frequency (32-bit unsigned integer, little endian) data size : number of data bytes in the record (32-bit unsigned integer, little endian) binary data : SDS stream (little endian, no padding) as described with the *.sds.yml file.","title":"File Format"},{"location":"theory/#yaml-metadata-format","text":"The content of each data stream may be described in a YAML metadata file that is created by the user. The following section defines the YAML format of this metadata file. The file sds.schema.json is a schema description of the SDS Format Description. sds: Start of the SDS Format Description name: Name of the Synchronous Data Stream (SDS) description: Additional descriptive text (optional) frequency: Capture frequency of the SDS tick-frequency: Tick frequency of the timestamp value (optional); default: 1000 for 1 milli-second interval content: List of values captured (see below) content: List of values captured (in the order of the data file) - value: Name of the value type: Data type of the value offset: Offset of the value (optional); default: 0 scale: Scale factor of the value (optional); default: 1.0 unit: Physical unit of the value (optional); default: no units Example This example defines a data stream with the name \"sensorX\" that contains the values of a gyroscope, temperature sensor, and additional raw data (that are not further described). The binary data that are coming form this sensors are stored in data files with the following file format: <sensor-name>.<file-index>.sds . In this example the files names could be: sensorX.0.sds # capture 0 sensorX.1.sds # capture 1 The following sensorX.sds.yml provides the format description of the SDS sensorX binary data files and maybe used by data conversion utilities and data viewers. sds: # describes a synchronous data stream name: sensorX # user defined name description: Gyroscope stream with 1KHz, plus additional user data frequency: 1000 content: - value: x # Value name is 'x' type: uint16_t # stored using a 16-bit unsigned int scale: 0.2 # value is scaled by 0.2 unit: dps # base unit of the value - value: y type: uint16_t scale: 0.2 unit: dps - value: z type: uint16_t unit: dps # scale 1.0 is default - value: temp type: float unit: degree Celsius - value: raw type: uint16_t # raw data, no scale or unit given - value: flag type: uint32_t:1 # a single bit stored in a 32-bit int","title":"YAML Metadata Format"},{"location":"theory/#code-example","text":"The following code snippets show the usage of the Recorder Interface . In this case an accelerometer data stream is recorded. // *** variable definitions *** struct { // sensor data stream format uint16_t x; uint16_t y; uint16_t z; } accelerometer [30]; // number of samples in one data stream record sdsRecId_t *accel_id, // data stream id uint8_t accel_buf[(sizeof(accel_buf)*2)+0x800]; // data stream buffer for circular buffer handling : // *** function calls *** sdsRecInit(NULL); // init SDS Recorder : // open data stream for recording accel_id = sdsRecOpen(\"Accel\", accel_buf, sizeof(accel_buf), 2*(sizeof(accelerometer)); : // write data in accelerometer buffer with timestamp from RTOS kernel. timestamp = osKernelGetTickCount(); n = sdsRecWrite(accel_id, timestamp, accelerometer, sizeof(accelerometer)); if (n != sizeof(accelerometer)) { ... // unexpected size returned, error handling } : sdsRecClose (accel_id); // close data stream","title":"Code Example"},{"location":"theory/#buffer-size","text":"The size of the data stream buffer depends on several factors such as: the communication interface used as the technology may impose certain buffer sizes to maximize the transfer rate. the size of the data stream as it is recommended that the buffer is at least three the size of a single data stream. the frequency of the algorithm execution. Fast execution speeds may require a larger buffer. A a guideline, the buffer size should be 2 times the block size + 2KB. As a minimum 0x1000 (4 KB) is recommended.","title":"Buffer Size"},{"location":"theory/#sdsio-server-protocol","text":"The SDSIO Server uses a simple protocol for data exchange between a Host computer and the embedded target that integrates an SDSIO Interface . The protocol assumes that the correct communication to the server is already ensured by the underlying technology (TCP/IP or USB) and therefore no extra check is implemented. The following conventions describe the command semantic used in the following documentation\" Symbol Description > Prefix indicating the direction: Command from target to Host. < Prefix indicating the direction: Response from Host to target. WORD 32-bit value (low byte first). **** The field above has exactly one occurrence. ++++ The field above has a variable length. Commands: Commands are send from the embedded target to the Host computer that is running the SDSIO Server. ID Name Description 1 SDSIO_CMD_OPEN Open a SDS data file 2 SDSIO_CMD_CLOSE Close a SDS data file 3 SDSIO_CMD_WRITE Write to SDS data file 4 SDSIO_CMD_READ Read from SDS data file 5 SDSIO_CMD_EOS End of Stream Each Command starts with a Header (4 Words) and optional data with variable length. Depending on the Command, the SDSIO Server replies with a Response that repeats the Header and delivers additional data. SDSIO_CMD_OPEN The Command ID=1 SDSIO_CMD_OPEN opens an SDS data file on the Host computer. SDS data filenames use the following file format: <name>.<file-index>.sds . Name is the base file name of the SDS data file. Len of Name is the size of the string in bytes. <file-index> is a sequential number starting from 0 . Mode defines read (value=0) or write (value=1) operation. For write , the server inserts the next available <file-index> number that does not exist yet (if Name.3.sds exists, the server creates Name.4.sds ). For read the server maintains a list of Names that where previously used. When a Name was not used before it opens <file-index>=0 , i.e. Name.0.sds . | WORD | WORD **| WORD | WORD *******|++++++| > 1 | 0 | Mode | Len of Name | Name | |******|********|******|*************|++++++| The Response ID=1 SDSIO_CMD_OPEN provides a Handle that is used to identify the file in subsequent commands. | WORD | WORD **| WORD | WORD *******| < 1 | Handle | Mode | 0 | |******|********|******|*************| SDSIO_CMD_CLOSE The Command ID=2 SDSIO_CMD_CLOSE closes an SDS data file on the Host computer. The Handle is the identifier obtained with SDSIO_CMD_OPEN . There is no Response from the SDSIO Server on this command. | WORD | WORD | WORD | WORD | > 2 | Handle | 0 | 0 | |******|********|******|******| SDSIO_CMD_WRITE The Command ID=3 SDSIO_CMD_WRITE writes data to an SDS data file on the Host computer. The Handle is the identifier obtained with SDSIO_CMD_OPEN . Size is the Data size in bytes. There is no Response from the SDSIO Server on this command. | WORD | WORD | WORD | WORD |++++++| > 3 | Handle | 0 | Size | Data | |******|********|******|******|++++++| SDSIO_CMD_READ The Command ID=4 SDSIO_CMD_READ reads data from an SDS data file on the Host computer. The Handle is the identifier obtained with SDSIO_CMD_OPEN . Size are the number of bytes that should be read. | WORD | WORD | WORD | WORD | > 4 | Handle | Size | 0 | |******|********|******|******| The Response ID=4 SDSIO_CMD_READ provides the data read from an SDS data file on the HOST computer. Size is the Data size in bytes that is read. | WORD | WORD | WORD | WORD |++++++| < 4 | Handle | 0 | Size | Data | |******|********|******|******|++++++| SDSIO_CMD_EOS The Command ID=5 SDSIO_CMD_EOS checks if the end of file is reached. The Handle is the identifier obtained with SDSIO_CMD_OPEN . | WORD | WORD | WORD | WORD | > 5 | Handle | 0 | 0 | |******|********|******|******| The Response ID=5 SDSIO_CMD_EOS returs the Status with nonzero = end of stream, else 0 | WORD | WORD | WORD | WORD | < 5 | Handle | Status | 0 | |******|********|********|******| ToDo: I don't understand why this command is needed as SDSIO_CMD_READ returns indirectly this status already. Also the nonzero above needs work.","title":"SDSIO Server Protocol"},{"location":"theory/#sdsio-message-sequence","text":"This is the message sequence of the SDS DataTest example when connected to MDK-Middleware Ethernet. It contains the following threads that executes on the target. Control: Overall execution Control Algorithm: Algorithm under test Recorder: SDS Recorder thread (sdsRecThread) Playback: SDS Playback thread (sdsPlayThread) The Server is the SDSIO Server executing on the target system. ToDo rework this diagram sequenceDiagram participant Control participant Algorithm create participant Recorder as SDS Recorder participant Server as SDSIO Server Control->>Recorder: sdsRecInit Note over Control: sdsRecOpen Control->>Server: SDSIO_CMD_OPEN activate Server Server-->>Control: Response activate Algorithm loop periodic Note over Algorithm: sdsRecWrite Algorithm->>Recorder: Threshold Trigger loop send all data Recorder->>Server: SDSIO_CMD_WRITE end end deactivate Algorithm Note over Control: sdsRecClose Control->>Recorder: Close Trigger loop send all data Recorder->>Server: SDSIO_CMD_WRITE end Recorder->>Control: Close Confirm Control->>Server: SDSIO_CMD_CLOSE deactivate Server ToDo: create similar diagram for Playback should Playback and Record use the same Thread? How is the buffer filled on PlayOpen? document control blocks in sds.c, sds_rec.c, and sds_play.c (comments might be sufficient) How does Threshold work? when Threshold is reach, the write operation writes the whole buffer. The transport layer (TCP/IP) may need to split this into multiple packs. Should size be optimized for transport layer? This writes all buffers https://github.com/ARM-software/SDS-Framework/blob/main/sds/source/sds_rec.c#L157 until empty. When Recorder is same priority as Algorithm, Algorithm might not be executed for quite a while. sds.c generates detailed events (are they documented?) but sds_rec.c does not really use this information Threshold event is only set when complete write was possible, is this correct? https://github.com/ARM-software/SDS-Framework/blob/main/sds/source/sds_rec.c#L298 ToDo review this section","title":"SDSIO Message Sequence"},{"location":"theory/#guidelines-for-stream-buffer-sizing-and-threshold-settings","text":"","title":"Guidelines for Stream Buffer sizing and Threshold settings"},{"location":"theory/#overview","text":"The SDS Recorder/Player uses memory buffers to manage data recording and playback efficiently. Proper buffer and threshold configurations optimize performance by balancing data production, consumption, and system resource utilization.","title":"Overview"},{"location":"theory/#stream-buffer-size","text":"The size of memory buffers affects the balance between data production and consumption. The absolute minimum stream buffer size should be large enough to store one maximum record along with its header (8 bytes) . The recommended stream buffer size should be large enough to store at least two maximum records along with headers (8 bytes per record) and can be rounded up for convenience. The record size generally corresponds to the data size used by the underlying technology. For example, in typical ML applications , the record size should ideally match the data slice required by the DSP process . If sufficient RAM is available, increasing the buffer size can improve performance.","title":"Stream Buffer Size"},{"location":"theory/#threshold-settings-for-sds-recorderplayer","text":"","title":"Threshold Settings for SDS Recorder/Player"},{"location":"theory/#function-of-thresholds","text":"For the SDS Recorder: Determines when data writing to the I/O begins. For the SDS Player: Determines when data reading from the I/O begins. The recommended threshold setting is half of the stream buffer size , enabling a double-buffering technique where one half of the buffer is transferred while the other half continues to fill or be consumed. A well-optimized system ensures timely data transfer over the I/O: For the Recorder : Previously acquired data must be transferred before the remaining of the buffer fills with new data. For the Player : New playback data should be transferred before the previously transferred playback data is consumed.","title":"Function of Thresholds"},{"location":"theory/#impact-on-system-performance","text":"The threshold setting directly affects system performance, as I/O transfers temporarily occupy the CPU . During these operations, other system processes may experience limited CPU availability. If the system requires additional CPU resources for other tasks, adjustments can be made by: Increasing the priority of critical threads . Reducing the threshold setting , which shortens the duration of each transfer but increases the frequency of transfers. Note: Thresholds operate based on discrete record sizes. A threshold is only triggered when a write or read operation surpasses (for write) or falls below (for read) the set limit. When handling large records, breaking them into smaller chunks may be necessary to optimize system performance.","title":"Impact on System Performance"},{"location":"theory/#additional-settings-affecting-io-bandwidth","text":"Several additional factors influence I/O bandwidth, including: Temporary Recorder/Player buffer size (configured in the sds_rec_config.h / sds_play_config.h files). I/O low-level buffering .","title":"Additional Settings Affecting I/O Bandwidth"},{"location":"theory/#optimizing-io-buffering","text":"For optimal performance , the temporary Recorder/Player buffer size should match the I/O low-level buffer size . For some interfaces, the I/O low-level buffer size can be configurable, for others, it is fixed. Example: The USB Virtual COM interface allows I/O low-level buffer size configuration. It is recommended to set this buffer size as a multiple of the bulk endpoint maximum packet size (512 bytes for USB high-speed connections).","title":"Optimizing I/O Buffering"},{"location":"theory/#example-configurations-for-typical-ml-use-cases","text":"ML Use Case DSP slice Calculation Buffer Size Threshold Motion detection 125 accelerometer samples 2 \u00d7 [(125 samples \u00d7 3 axes \u00d7 4 bytes per axis) + 8] = 3016 -> rounded to 3072 3072 bytes 1536 Keyword spotting 250 ms of audio data samples (16kHz) 2 \u00d7 [(4,000 audio samples \u00d7 4 bytes per sample) + 8] = 32,016 -> rounded to 32,768 32768 bytes 16384 Object detection 1 picture (320x320) 2 \u00d7 [(320 \u00d7 320 pixels \u00d7 4 bytes per pixel) + 8] = 819,216 819216 bytes 409608","title":"Example configurations for typical ML use cases"},{"location":"theory/#best-practices-summary","text":"Ensure buffer sizes align with DSP ata slice sizes for efficient ML processing. Use double-buffering to enhance I/O efficiency. Adjust threshold settings to balance performance and CPU usage. Match temporary buffer sizes to I/O low-level buffer sizes where possible. By following these guidelines, the SDS Recorder/Player can be configured efficiently to balance performance, latency, and CPU utilization , ensuring smooth data processing and system stability.","title":"Best Practices Summary"},{"location":"utilities/","text":"Utilities The SDS-Framework includes the following utilities that are implemented in Python. SDSIO-Server: enables recording and playback of SDS data files via socket (TCP/IP) or serial (UART) connection. SDS-View: graphical data viewer for SDS data files. SDS-Convert: convert SDS data files into CSV, Qeexo V2 CSV, or WAV format. SDSIO-Server The Python utility SDSIO-Server enables recording and playback of SDS data files via socket (TCP/IP) or serial (UART) connection. It communicates with the target using these SDSIO interfaces : serial/usart for serial communication via CMSIS-Driver USART. socket for TCP/IP communication using MDK-Middleware, LwIP, or CMSIS-Driver WiFi. vcom/mdk for serial communication via USB VCom using MDK-Middleware. The SDS data stream is recorded to files with the following naming convention: <name>.<index>.sds <name> is the name of the I/O stream specified with the function sdsRecOpen or sdsPlayOpen on the target. <index> is the zero-based index which is incremented for each subsequent recording. The data content of the <name>.<index>.sds is described with metadata file <name>.sds.yml in YAML format . Usage Setup the Python-based sdsio-server.py tool as described in utilities/SDSIO-Server/README.md . Depending on the SDS interface used on the target use either Socket Mode or Serial Mode as described below. The SDSIO_Server terminates with Ctrl+C . Socket Mode usage: sdsio-server.py socket [-h] [--ipaddr <IP> | --interface <Interface>] [--port <TCP Port>] [--outdir <Output dir>] options: -h, --help show this help message and exit optional: --ipaddr <IP> Server IP address (not allowed with argument --interface) --interface <Interface> Network interface (not allowed with argument --ipaddr) --port <TCP Port> TCP port (default: 5050) --outdir <Output dir> Output directory Example: python sdsio-server.py socket --interface eth0 --outdir ./out_dir Serial Mode usage: sdsio-server.py serial [-h] -p <Serial Port> [--baudrate <Baudrate>] [--parity <Parity>] [--stopbits <Stop bits>] [--outdir <Output dir>] options: -h, --help show this help message and exit required: -p <Serial Port> Serial port optional: --baudrate <Baudrate> Baudrate (default: 115200) --parity <Parity> Parity: N = None, E = Even, O = Odd, M = Mark, S = Space (default: N) --stopbits <Stop bits> Stop bits: 1, 1.5, 2 (default: 1) --outdir <Output dir> Output directory Example: python sdsio-server.py serial -p COM0 --baudrate 115200 --outdir ./out_dir SDS-View The Python utility SDSIO-View outputs a time-based plot of SDS data files ( <name>.<index>.sds ) based on the meta-data file ( <name>.sds.yml . The horizontal time scale is derived from the number of data points in a recording and frequency provided in the metadata description. All plots form a single recording will be displayed on the same figure (shared vertical scale). If there are 3 values described in the metadata file, an optional 3D view may be displayed. Usage Setup the Python-based sds-view.py tool as described in utilities/SDS-View/README.md . Invoke the tool as explained below. usage: sds-view.py [-h] -y <yaml_file> -s <sds_file> [<sds_file> ...] [--3D] View SDS data options: -h, --help show this help message and exit required: -y <yaml_file> YAML sensor description file -s <sds_file> [<sds_file> ...] SDS data recording file optional: --3D Plot 3D view in addition to normal 2D Example: python sds-view.py -y test/Gyroscope.sds.yml -s test/Gyroscope.0.sds SDS-Convert The Python utility SDSIO-Convert converts SDS data files to selected format based on description in metadata (YAML) files. Usage Setup the Python-based sds-convert.py tool as described in utilities/SDS-Convert/README.md . Depending on the required format use the tool as shown below. Audio WAV usage: sds-convert.py audio_wav [-h] -i <input_file> [<input_file> ...] -o <output_file> [-y <yaml_file> [<yaml_file> ...]] options: -h, --help show this help message and exit required: -i <input_file> [<input_file> ...] Input file -o <output_file> Output file optional: -y <yaml_file> [<yaml_file> ...] YAML sensor description file Note The metadata and SDS data file pairs must be passed as arguments in the same order to decoded data correctly. Example: python sds-convert.py audio_wav -i Microphone.0.sds -o microphone.wav -y Microphone.sds.yml Simple CSV usage: sds-convert.py simple_csv [-h] -i <input_file> [<input_file> ...] -o <output_file> [-y <yaml_file> [<yaml_file> ...]] [--normalize] [--start-tick <start-tick>] [--stop-tick <stop-tick>] options: -h, --help show this help message and exit required: -i <input_file> [<input_file> ...] Input file -o <output_file> Output file optional: -y <yaml_file> [<yaml_file> ...] YAML sensor description file --normalize Normalize timestamps so they start with 0 --start-tick <start-tick> Exported data start tick (default: None) --stop-tick <stop-tick> Exported data stop tick (default: None) Note The metadata and SDS data file pairs must be passed as arguments in the same order to decoded data correctly. Example: python sds-convert.py simple_csv -i Gyroscope.0.sds -o gyroscope_simple.csv -y Gyroscope.sds.yml --normalize --start-tick 0.2 --stop-tick 0.3 Qeexo V2 CSV usage: sds-convert.py qeexo_v2_csv [-h] -i <input_file> [<input_file> ...] -o <output_file> [-y <yaml_file> [<yaml_file> ...]] [--normalize] [--start-tick <start-tick>] [--stop-tick <stop-tick>] [--label 'label'] [--interval <interval>] [--sds_index <sds_index>] options: -h, --help show this help message and exit required: -i <input_file> [<input_file> ...] Input file -o <output_file> Output file optional: -y <yaml_file> [<yaml_file> ...] YAML sensor description file --normalize Normalize timestamps so they start with 0 --start-tick <start-tick> Exported data start tick (default: None) --stop-tick <stop-tick> Exported data stop tick (default: None) --label 'label' Qeexo class label for sensor data (default: None) --interval <interval> Qeexo timestamp interval in ms (default: 50) --sds_index <sds_index> SDS file index to write (default: <sensor>.0.sds) Note The metadata and SDS data file pairs must be passed as arguments in the same order to decoded data correctly. Examples: Convert SDS data files to Qeexo V2 CSV files: python sds-convert.py qeexo_v2_csv -i Gyroscope.0.sds Accelerometer.0.sds -o sensor_fusion.csv -y Gyroscope.sds.yaml Accelerometer.sds.yaml --normalize --start-tick 200 --stop-tick 300 Convert Qeexo V2 CSV files to SDS data files: python sds-convert qeexo_v2_csv -i accelerometer_data.csv -o accelerometer.sds","title":"Utilities"},{"location":"utilities/#utilities","text":"The SDS-Framework includes the following utilities that are implemented in Python. SDSIO-Server: enables recording and playback of SDS data files via socket (TCP/IP) or serial (UART) connection. SDS-View: graphical data viewer for SDS data files. SDS-Convert: convert SDS data files into CSV, Qeexo V2 CSV, or WAV format.","title":"Utilities"},{"location":"utilities/#sdsio-server","text":"The Python utility SDSIO-Server enables recording and playback of SDS data files via socket (TCP/IP) or serial (UART) connection. It communicates with the target using these SDSIO interfaces : serial/usart for serial communication via CMSIS-Driver USART. socket for TCP/IP communication using MDK-Middleware, LwIP, or CMSIS-Driver WiFi. vcom/mdk for serial communication via USB VCom using MDK-Middleware. The SDS data stream is recorded to files with the following naming convention: <name>.<index>.sds <name> is the name of the I/O stream specified with the function sdsRecOpen or sdsPlayOpen on the target. <index> is the zero-based index which is incremented for each subsequent recording. The data content of the <name>.<index>.sds is described with metadata file <name>.sds.yml in YAML format .","title":"SDSIO-Server"},{"location":"utilities/#usage","text":"Setup the Python-based sdsio-server.py tool as described in utilities/SDSIO-Server/README.md . Depending on the SDS interface used on the target use either Socket Mode or Serial Mode as described below. The SDSIO_Server terminates with Ctrl+C .","title":"Usage"},{"location":"utilities/#socket-mode","text":"usage: sdsio-server.py socket [-h] [--ipaddr <IP> | --interface <Interface>] [--port <TCP Port>] [--outdir <Output dir>] options: -h, --help show this help message and exit optional: --ipaddr <IP> Server IP address (not allowed with argument --interface) --interface <Interface> Network interface (not allowed with argument --ipaddr) --port <TCP Port> TCP port (default: 5050) --outdir <Output dir> Output directory Example: python sdsio-server.py socket --interface eth0 --outdir ./out_dir","title":"Socket Mode"},{"location":"utilities/#serial-mode","text":"usage: sdsio-server.py serial [-h] -p <Serial Port> [--baudrate <Baudrate>] [--parity <Parity>] [--stopbits <Stop bits>] [--outdir <Output dir>] options: -h, --help show this help message and exit required: -p <Serial Port> Serial port optional: --baudrate <Baudrate> Baudrate (default: 115200) --parity <Parity> Parity: N = None, E = Even, O = Odd, M = Mark, S = Space (default: N) --stopbits <Stop bits> Stop bits: 1, 1.5, 2 (default: 1) --outdir <Output dir> Output directory Example: python sdsio-server.py serial -p COM0 --baudrate 115200 --outdir ./out_dir","title":"Serial Mode"},{"location":"utilities/#sds-view","text":"The Python utility SDSIO-View outputs a time-based plot of SDS data files ( <name>.<index>.sds ) based on the meta-data file ( <name>.sds.yml . The horizontal time scale is derived from the number of data points in a recording and frequency provided in the metadata description. All plots form a single recording will be displayed on the same figure (shared vertical scale). If there are 3 values described in the metadata file, an optional 3D view may be displayed.","title":"SDS-View"},{"location":"utilities/#usage_1","text":"Setup the Python-based sds-view.py tool as described in utilities/SDS-View/README.md . Invoke the tool as explained below. usage: sds-view.py [-h] -y <yaml_file> -s <sds_file> [<sds_file> ...] [--3D] View SDS data options: -h, --help show this help message and exit required: -y <yaml_file> YAML sensor description file -s <sds_file> [<sds_file> ...] SDS data recording file optional: --3D Plot 3D view in addition to normal 2D Example: python sds-view.py -y test/Gyroscope.sds.yml -s test/Gyroscope.0.sds","title":"Usage"},{"location":"utilities/#sds-convert","text":"The Python utility SDSIO-Convert converts SDS data files to selected format based on description in metadata (YAML) files.","title":"SDS-Convert"},{"location":"utilities/#usage_2","text":"Setup the Python-based sds-convert.py tool as described in utilities/SDS-Convert/README.md . Depending on the required format use the tool as shown below.","title":"Usage"},{"location":"utilities/#audio-wav","text":"usage: sds-convert.py audio_wav [-h] -i <input_file> [<input_file> ...] -o <output_file> [-y <yaml_file> [<yaml_file> ...]] options: -h, --help show this help message and exit required: -i <input_file> [<input_file> ...] Input file -o <output_file> Output file optional: -y <yaml_file> [<yaml_file> ...] YAML sensor description file Note The metadata and SDS data file pairs must be passed as arguments in the same order to decoded data correctly. Example: python sds-convert.py audio_wav -i Microphone.0.sds -o microphone.wav -y Microphone.sds.yml","title":"Audio WAV"},{"location":"utilities/#simple-csv","text":"usage: sds-convert.py simple_csv [-h] -i <input_file> [<input_file> ...] -o <output_file> [-y <yaml_file> [<yaml_file> ...]] [--normalize] [--start-tick <start-tick>] [--stop-tick <stop-tick>] options: -h, --help show this help message and exit required: -i <input_file> [<input_file> ...] Input file -o <output_file> Output file optional: -y <yaml_file> [<yaml_file> ...] YAML sensor description file --normalize Normalize timestamps so they start with 0 --start-tick <start-tick> Exported data start tick (default: None) --stop-tick <stop-tick> Exported data stop tick (default: None) Note The metadata and SDS data file pairs must be passed as arguments in the same order to decoded data correctly. Example: python sds-convert.py simple_csv -i Gyroscope.0.sds -o gyroscope_simple.csv -y Gyroscope.sds.yml --normalize --start-tick 0.2 --stop-tick 0.3","title":"Simple CSV"},{"location":"utilities/#qeexo-v2-csv","text":"usage: sds-convert.py qeexo_v2_csv [-h] -i <input_file> [<input_file> ...] -o <output_file> [-y <yaml_file> [<yaml_file> ...]] [--normalize] [--start-tick <start-tick>] [--stop-tick <stop-tick>] [--label 'label'] [--interval <interval>] [--sds_index <sds_index>] options: -h, --help show this help message and exit required: -i <input_file> [<input_file> ...] Input file -o <output_file> Output file optional: -y <yaml_file> [<yaml_file> ...] YAML sensor description file --normalize Normalize timestamps so they start with 0 --start-tick <start-tick> Exported data start tick (default: None) --stop-tick <stop-tick> Exported data stop tick (default: None) --label 'label' Qeexo class label for sensor data (default: None) --interval <interval> Qeexo timestamp interval in ms (default: 50) --sds_index <sds_index> SDS file index to write (default: <sensor>.0.sds) Note The metadata and SDS data file pairs must be passed as arguments in the same order to decoded data correctly. Examples: Convert SDS data files to Qeexo V2 CSV files: python sds-convert.py qeexo_v2_csv -i Gyroscope.0.sds Accelerometer.0.sds -o sensor_fusion.csv -y Gyroscope.sds.yaml Accelerometer.sds.yaml --normalize --start-tick 200 --stop-tick 300 Convert Qeexo V2 CSV files to SDS data files: python sds-convert qeexo_v2_csv -i accelerometer_data.csv -o accelerometer.sds","title":"Qeexo V2 CSV"},{"location":"SDS_API/annotated/","text":"Class List Here are the classes, structs, unions and interfaces with brief descriptions: struct header_t","title":"Class List"},{"location":"SDS_API/annotated/#class-list","text":"Here are the classes, structs, unions and interfaces with brief descriptions: struct header_t","title":"Class List"},{"location":"SDS_API/files/","text":"File List Here is a list of all files with brief descriptions: dir sds dir include file sds_buffer.h file sds_rec_play.h file sdsio.h file sdsio_client.h file sds.txt","title":"File List"},{"location":"SDS_API/files/#file-list","text":"Here is a list of all files with brief descriptions: dir sds dir include file sds_buffer.h file sds_rec_play.h file sdsio.h file sdsio_client.h file sds.txt","title":"File List"},{"location":"SDS_API/structheader__t/","text":"Struct header_t ClassList > header_t Public Attributes Type Name uint32_t argument uint32_t command uint32_t data_size uint32_t sdsio_id Public Attributes Documentation variable argument uint32_t header_t::argument; variable command uint32_t header_t::command; variable data_size uint32_t header_t::data_size; variable sdsio_id uint32_t header_t::sdsio_id; The documentation for this class was generated from the following file sds/include/sdsio_client.h","title":"Struct header_t"},{"location":"SDS_API/structheader__t/#struct-header_t","text":"ClassList > header_t","title":"Struct header_t"},{"location":"SDS_API/structheader__t/#public-attributes","text":"Type Name uint32_t argument uint32_t command uint32_t data_size uint32_t sdsio_id","title":"Public Attributes"},{"location":"SDS_API/structheader__t/#public-attributes-documentation","text":"","title":"Public Attributes Documentation"},{"location":"SDS_API/structheader__t/#variable-argument","text":"uint32_t header_t::argument;","title":"variable argument"},{"location":"SDS_API/structheader__t/#variable-command","text":"uint32_t header_t::command;","title":"variable command"},{"location":"SDS_API/structheader__t/#variable-data_size","text":"uint32_t header_t::data_size;","title":"variable data_size"},{"location":"SDS_API/structheader__t/#variable-sdsio_id","text":"uint32_t header_t::sdsio_id; The documentation for this class was generated from the following file sds/include/sdsio_client.h","title":"variable sdsio_id"},{"location":"SDS_API/group__Define/","text":"Group Define Modules > Define Modules Type Name module SDS Error Codes SDS Player Error Codes. module SDS Event Codes SDS Player Event Codes.","title":"Group Define"},{"location":"SDS_API/group__Define/#group-define","text":"Modules > Define","title":"Group Define"},{"location":"SDS_API/group__Define/#modules","text":"Type Name module SDS Error Codes SDS Player Error Codes. module SDS Event Codes SDS Player Event Codes.","title":"Modules"},{"location":"SDS_API/group__SDS__Errors/","text":"Group SDS_Errors Modules > SDS_Errors SDS Player Error Codes. More... Detailed Description The following values are returned by most functions.","title":"Group SDS_Errors"},{"location":"SDS_API/group__SDS__Errors/#group-sds_errors","text":"Modules > SDS_Errors SDS Player Error Codes. More...","title":"Group SDS_Errors"},{"location":"SDS_API/group__SDS__Errors/#detailed-description","text":"The following values are returned by most functions.","title":"Detailed Description"},{"location":"SDS_API/group__SDS__Event__Codes/","text":"Group SDS_Event_Codes Modules > SDS_Event_Codes SDS Player Event Codes. More... Detailed Description The following values are passed as event value to sdsPlayEvent_t.","title":"Group SDS_Event_Codes"},{"location":"SDS_API/group__SDS__Event__Codes/#group-sds_event_codes","text":"Modules > SDS_Event_Codes SDS Player Event Codes. More...","title":"Group SDS_Event_Codes"},{"location":"SDS_API/group__SDS__Event__Codes/#detailed-description","text":"The following values are passed as event value to sdsPlayEvent_t.","title":"Detailed Description"},{"location":"SDS_API/group__SDS__Circular__Buffer/","text":"Group SDS_Circular_Buffer Modules > SDS_Circular_Buffer sds.h: SDS circular buffer handling for data streams More... Public Types Type Name typedef void(* sdsBufferEvent_t Call back function for SDS circular buffer handling. typedef void * sdsBufferId_t Handle to SDS buffer stream. Public Functions Type Name int32_t sdsBufferClear ( sdsBufferId_t id) Clear SDS buffer stream data. int32_t sdsBufferClose ( sdsBufferId_t id) Close SDS buffer stream. uint32_t sdsBufferGetCount ( sdsBufferId_t id) Get data count in SDS buffer stream. sdsBufferId_t sdsBufferOpen (void * buf, uint32_t buf_size, uint32_t threshold_low, uint32_t threshold_high) Open SDS buffer stream. uint32_t sdsBufferRead ( sdsBufferId_t id, void * buf, uint32_t buf_size) Read data from SDS buffer stream. int32_t sdsBufferRegisterEvents ( sdsBufferId_t id, sdsBufferEvent_t event_cb, uint32_t event_mask, void * event_arg) Register SDS buffer stream events. uint32_t sdsBufferWrite ( sdsBufferId_t id, const void * buf, uint32_t buf_size) Write data to SDS buffer stream. Detailed Description The stream data is written to and read from a circular buffer allocated in RAM. Event callback function which is triggered on data threshold reached can be registered. Public Types Documentation typedef sdsBufferEvent_t Call back function for SDS circular buffer handling. typedef void(* sdsBufferEvent_t) (sdsBufferId_t id, uint32_t event, void *arg); todo Parameters: id sdsBufferId_t handle to SDS buffer stream event event code arg pointer to argument typedef sdsBufferId_t Handle to SDS buffer stream. typedef void* sdsBufferId_t; todo test Public Functions Documentation function sdsBufferClear Clear SDS buffer stream data. int32_t sdsBufferClear ( sdsBufferId_t id ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream Returns: return code function sdsBufferClose Close SDS buffer stream. int32_t sdsBufferClose ( sdsBufferId_t id ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream Returns: return code function sdsBufferGetCount Get data count in SDS buffer stream. uint32_t sdsBufferGetCount ( sdsBufferId_t id ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream Returns: number of bytes in buffer stream function sdsBufferOpen Open SDS buffer stream. sdsBufferId_t sdsBufferOpen ( void * buf, uint32_t buf_size, uint32_t threshold_low, uint32_t threshold_high ) todo Parameters: buf pointer to buffer for stream buf_size buffer size in bytes threshold_low data low threshold in bytes threshold_high data high threshold in bytes Returns: sdsId_t Handle to SDS buffer stream function sdsBufferRead Read data from SDS buffer stream. uint32_t sdsBufferRead ( sdsBufferId_t id, void * buf, uint32_t buf_size ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream buf pointer to buffer for data to read buf_size buffer size in bytes Returns: number of bytes read function sdsBufferRegisterEvents Register SDS buffer stream events. int32_t sdsBufferRegisterEvents ( sdsBufferId_t id, sdsBufferEvent_t event_cb, uint32_t event_mask, void * event_arg ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream event_cb pointer to sdsEvent_t event_mask event mask event_arg event argument Returns: return code function sdsBufferWrite Write data to SDS buffer stream. uint32_t sdsBufferWrite ( sdsBufferId_t id, const void * buf, uint32_t buf_size ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream buf pointer to buffer with data to write buf_size buffer size in bytes Returns: number of bytes written","title":"Group SDS_Circular_Buffer"},{"location":"SDS_API/group__SDS__Circular__Buffer/#group-sds_circular_buffer","text":"Modules > SDS_Circular_Buffer sds.h: SDS circular buffer handling for data streams More...","title":"Group SDS_Circular_Buffer"},{"location":"SDS_API/group__SDS__Circular__Buffer/#public-types","text":"Type Name typedef void(* sdsBufferEvent_t Call back function for SDS circular buffer handling. typedef void * sdsBufferId_t Handle to SDS buffer stream.","title":"Public Types"},{"location":"SDS_API/group__SDS__Circular__Buffer/#public-functions","text":"Type Name int32_t sdsBufferClear ( sdsBufferId_t id) Clear SDS buffer stream data. int32_t sdsBufferClose ( sdsBufferId_t id) Close SDS buffer stream. uint32_t sdsBufferGetCount ( sdsBufferId_t id) Get data count in SDS buffer stream. sdsBufferId_t sdsBufferOpen (void * buf, uint32_t buf_size, uint32_t threshold_low, uint32_t threshold_high) Open SDS buffer stream. uint32_t sdsBufferRead ( sdsBufferId_t id, void * buf, uint32_t buf_size) Read data from SDS buffer stream. int32_t sdsBufferRegisterEvents ( sdsBufferId_t id, sdsBufferEvent_t event_cb, uint32_t event_mask, void * event_arg) Register SDS buffer stream events. uint32_t sdsBufferWrite ( sdsBufferId_t id, const void * buf, uint32_t buf_size) Write data to SDS buffer stream.","title":"Public Functions"},{"location":"SDS_API/group__SDS__Circular__Buffer/#detailed-description","text":"The stream data is written to and read from a circular buffer allocated in RAM. Event callback function which is triggered on data threshold reached can be registered.","title":"Detailed Description"},{"location":"SDS_API/group__SDS__Circular__Buffer/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"SDS_API/group__SDS__Circular__Buffer/#typedef-sdsbufferevent_t","text":"Call back function for SDS circular buffer handling. typedef void(* sdsBufferEvent_t) (sdsBufferId_t id, uint32_t event, void *arg); todo Parameters: id sdsBufferId_t handle to SDS buffer stream event event code arg pointer to argument","title":"typedef sdsBufferEvent_t"},{"location":"SDS_API/group__SDS__Circular__Buffer/#typedef-sdsbufferid_t","text":"Handle to SDS buffer stream. typedef void* sdsBufferId_t; todo test","title":"typedef sdsBufferId_t"},{"location":"SDS_API/group__SDS__Circular__Buffer/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"SDS_API/group__SDS__Circular__Buffer/#function-sdsbufferclear","text":"Clear SDS buffer stream data. int32_t sdsBufferClear ( sdsBufferId_t id ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream Returns: return code","title":"function sdsBufferClear"},{"location":"SDS_API/group__SDS__Circular__Buffer/#function-sdsbufferclose","text":"Close SDS buffer stream. int32_t sdsBufferClose ( sdsBufferId_t id ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream Returns: return code","title":"function sdsBufferClose"},{"location":"SDS_API/group__SDS__Circular__Buffer/#function-sdsbuffergetcount","text":"Get data count in SDS buffer stream. uint32_t sdsBufferGetCount ( sdsBufferId_t id ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream Returns: number of bytes in buffer stream","title":"function sdsBufferGetCount"},{"location":"SDS_API/group__SDS__Circular__Buffer/#function-sdsbufferopen","text":"Open SDS buffer stream. sdsBufferId_t sdsBufferOpen ( void * buf, uint32_t buf_size, uint32_t threshold_low, uint32_t threshold_high ) todo Parameters: buf pointer to buffer for stream buf_size buffer size in bytes threshold_low data low threshold in bytes threshold_high data high threshold in bytes Returns: sdsId_t Handle to SDS buffer stream","title":"function sdsBufferOpen"},{"location":"SDS_API/group__SDS__Circular__Buffer/#function-sdsbufferread","text":"Read data from SDS buffer stream. uint32_t sdsBufferRead ( sdsBufferId_t id, void * buf, uint32_t buf_size ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream buf pointer to buffer for data to read buf_size buffer size in bytes Returns: number of bytes read","title":"function sdsBufferRead"},{"location":"SDS_API/group__SDS__Circular__Buffer/#function-sdsbufferregisterevents","text":"Register SDS buffer stream events. int32_t sdsBufferRegisterEvents ( sdsBufferId_t id, sdsBufferEvent_t event_cb, uint32_t event_mask, void * event_arg ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream event_cb pointer to sdsEvent_t event_mask event mask event_arg event argument Returns: return code","title":"function sdsBufferRegisterEvents"},{"location":"SDS_API/group__SDS__Circular__Buffer/#function-sdsbufferwrite","text":"Write data to SDS buffer stream. uint32_t sdsBufferWrite ( sdsBufferId_t id, const void * buf, uint32_t buf_size ) todo Parameters: id sdsBufferId_t handle to SDS buffer stream buf pointer to buffer with data to write buf_size buffer size in bytes Returns: number of bytes written","title":"function sdsBufferWrite"},{"location":"SDS_API/group__SDS__IO__Interface/","text":"Group SDS_IO_Interface Modules > SDS_IO_Interface sdsio.h : SDS I/O Interface for data streams More... Public Types Type Name typedef void * sdsioId_t Handle to SDS I/O stream. enum sdsioMode_t Open Mode. Public Functions Type Name int32_t sdsioClose ( sdsioId_t id) Close I/O stream. int32_t sdsioEndOfStream ( sdsioId_t id) Check if end of stream has been reached. int32_t sdsioInit (void) Initialize SDS I/O. sdsioId_t sdsioOpen (const char * name, sdsioMode_t mode) Open I/O stream. uint32_t sdsioRead ( sdsioId_t id, void * buf, uint32_t buf_size) Read data from I/O stream. int32_t sdsioUninit (void) Un-initialize SDS I/O. uint32_t sdsioWrite ( sdsioId_t id, const void * buf, uint32_t buf_size) Write data to I/O stream. Detailed Description The SDS I/O interface reads or writes SDS data from a circular buffer. Public Types Documentation typedef sdsioId_t Handle to SDS I/O stream. typedef void* sdsioId_t; This pointer defines the handle to SDS I/O data stream. It is used to identify a data stream across the different functions. enum sdsioMode_t Open Mode. enum sdsioMode_t { sdsioModeRead = 0, sdsioModeWrite = 1 }; This enum identifies the read or write mode to SDS I/O data streams. Public Functions Documentation function sdsioClose Close I/O stream. int32_t sdsioClose ( sdsioId_t id ) todo Parameters: id sdsioId_t handle to SDS I/O stream Returns: return code function sdsioEndOfStream Check if end of stream has been reached. int32_t sdsioEndOfStream ( sdsioId_t id ) todo Parameters: id sdsioId_t handle to SDS I/O stream Returns: nonzero if end of stream, else 0 function sdsioInit Initialize SDS I/O. int32_t sdsioInit ( void ) todo Returns: return code function sdsioOpen Open I/O stream. sdsioId_t sdsioOpen ( const char * name, sdsioMode_t mode ) todo Parameters: name stream name (pointer to NULL terminated string) mode sdsioMode_t open mode Returns: sdsioId_t function sdsioRead Read data from I/O stream. uint32_t sdsioRead ( sdsioId_t id, void * buf, uint32_t buf_size ) todo Parameters: id sdsioId_t handle to SDS I/O stream buf pointer to buffer for data to read buf_size buffer size in bytes Returns: number of bytes read function sdsioUninit Un-initialize SDS I/O. int32_t sdsioUninit ( void ) todo Returns: return code function sdsioWrite Write data to I/O stream. uint32_t sdsioWrite ( sdsioId_t id, const void * buf, uint32_t buf_size ) todo Parameters: id sdsioId_t handle to SDS I/O stream buf pointer to buffer with data to write buf_size buffer size in bytes Returns: number of bytes written","title":"Group SDS_IO_Interface"},{"location":"SDS_API/group__SDS__IO__Interface/#group-sds_io_interface","text":"Modules > SDS_IO_Interface sdsio.h : SDS I/O Interface for data streams More...","title":"Group SDS_IO_Interface"},{"location":"SDS_API/group__SDS__IO__Interface/#public-types","text":"Type Name typedef void * sdsioId_t Handle to SDS I/O stream. enum sdsioMode_t Open Mode.","title":"Public Types"},{"location":"SDS_API/group__SDS__IO__Interface/#public-functions","text":"Type Name int32_t sdsioClose ( sdsioId_t id) Close I/O stream. int32_t sdsioEndOfStream ( sdsioId_t id) Check if end of stream has been reached. int32_t sdsioInit (void) Initialize SDS I/O. sdsioId_t sdsioOpen (const char * name, sdsioMode_t mode) Open I/O stream. uint32_t sdsioRead ( sdsioId_t id, void * buf, uint32_t buf_size) Read data from I/O stream. int32_t sdsioUninit (void) Un-initialize SDS I/O. uint32_t sdsioWrite ( sdsioId_t id, const void * buf, uint32_t buf_size) Write data to I/O stream.","title":"Public Functions"},{"location":"SDS_API/group__SDS__IO__Interface/#detailed-description","text":"The SDS I/O interface reads or writes SDS data from a circular buffer.","title":"Detailed Description"},{"location":"SDS_API/group__SDS__IO__Interface/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"SDS_API/group__SDS__IO__Interface/#typedef-sdsioid_t","text":"Handle to SDS I/O stream. typedef void* sdsioId_t; This pointer defines the handle to SDS I/O data stream. It is used to identify a data stream across the different functions.","title":"typedef sdsioId_t"},{"location":"SDS_API/group__SDS__IO__Interface/#enum-sdsiomode_t","text":"Open Mode. enum sdsioMode_t { sdsioModeRead = 0, sdsioModeWrite = 1 }; This enum identifies the read or write mode to SDS I/O data streams.","title":"enum sdsioMode_t"},{"location":"SDS_API/group__SDS__IO__Interface/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"SDS_API/group__SDS__IO__Interface/#function-sdsioclose","text":"Close I/O stream. int32_t sdsioClose ( sdsioId_t id ) todo Parameters: id sdsioId_t handle to SDS I/O stream Returns: return code","title":"function sdsioClose"},{"location":"SDS_API/group__SDS__IO__Interface/#function-sdsioendofstream","text":"Check if end of stream has been reached. int32_t sdsioEndOfStream ( sdsioId_t id ) todo Parameters: id sdsioId_t handle to SDS I/O stream Returns: nonzero if end of stream, else 0","title":"function sdsioEndOfStream"},{"location":"SDS_API/group__SDS__IO__Interface/#function-sdsioinit","text":"Initialize SDS I/O. int32_t sdsioInit ( void ) todo Returns: return code","title":"function sdsioInit"},{"location":"SDS_API/group__SDS__IO__Interface/#function-sdsioopen","text":"Open I/O stream. sdsioId_t sdsioOpen ( const char * name, sdsioMode_t mode ) todo Parameters: name stream name (pointer to NULL terminated string) mode sdsioMode_t open mode Returns: sdsioId_t","title":"function sdsioOpen"},{"location":"SDS_API/group__SDS__IO__Interface/#function-sdsioread","text":"Read data from I/O stream. uint32_t sdsioRead ( sdsioId_t id, void * buf, uint32_t buf_size ) todo Parameters: id sdsioId_t handle to SDS I/O stream buf pointer to buffer for data to read buf_size buffer size in bytes Returns: number of bytes read","title":"function sdsioRead"},{"location":"SDS_API/group__SDS__IO__Interface/#function-sdsiouninit","text":"Un-initialize SDS I/O. int32_t sdsioUninit ( void ) todo Returns: return code","title":"function sdsioUninit"},{"location":"SDS_API/group__SDS__IO__Interface/#function-sdsiowrite","text":"Write data to I/O stream. uint32_t sdsioWrite ( sdsioId_t id, const void * buf, uint32_t buf_size ) todo Parameters: id sdsioId_t handle to SDS I/O stream buf pointer to buffer with data to write buf_size buffer size in bytes Returns: number of bytes written","title":"function sdsioWrite"},{"location":"SDS_API/group__SDS__Recorder__Player/","text":"Group SDS_Recorder_Player Modules > SDS_Recorder_Player sds_rec_play.h : SDS Recorder and Player for writing and reading SDS files via communication or file I/O interface. More... Public Types Type Name typedef void * sdsRecPlayId_t Handle to SDS Recorder/Player stream. Public Functions Type Name int32_t sdsPlayClose ( sdsRecPlayId_t id) Close player stream. int32_t sdsPlayEndOfStream ( sdsRecPlayId_t id) Check if end of stream has been reached. uint32_t sdsPlayGetSize ( sdsRecPlayId_t id) Get data block size from Player stream. sdsRecPlayId_t sdsPlayOpen (const char * name, void * buf, uint32_t buf_size) Open player stream (read mode). uint32_t sdsPlayRead ( sdsRecPlayId_t id, uint32_t * timestamp, void * buf, uint32_t buf_size) int32_t sdsRecClose ( sdsRecPlayId_t id) Close recorder stream. sdsRecPlayId_t sdsRecOpen (const char * name, void * buf, uint32_t buf_size) Open recorder stream (write mode). int32_t sdsRecPlayInit (sdsRecPlayEvent_t event_cb) Initialize recorder and player. int32_t sdsRecPlayUninit (void) Uninitialize recorder and player. uint32_t sdsRecWrite ( sdsRecPlayId_t id, uint32_t timestamp, const void * buf, uint32_t buf_size) Write entire data block along with its timestamp to the recorder stream. Detailed Description via a communication stack, file system, or semihosting interface. Refer to the chapter SDS Interface for an overview. Public Types Documentation typedef sdsRecPlayId_t Handle to SDS Recorder/Player stream. typedef void* sdsRecPlayId_t; This pointer defines the handle to SDS recorder or player stream. It is used to identify a data stream across the different functions for the SDS Recorder and Player system. Public Functions Documentation function sdsPlayClose Close player stream. int32_t sdsPlayClose ( sdsRecPlayId_t id ) Closes a player stream. The function waits until all transfers are completed or a timeout occurs. The stream handle becomes invalid after successful closing. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream Returns: return code function sdsPlayEndOfStream Check if end of stream has been reached. int32_t sdsPlayEndOfStream ( sdsRecPlayId_t id ) Checks whether the player stream has reached the end of the SDS file. This condition is met when the SDS file signals end-of-stream and all buffered data has been read. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream Returns: nonzero if end of stream, else 0 function sdsPlayGetSize Get data block size from Player stream. uint32_t sdsPlayGetSize ( sdsRecPlayId_t id ) Returns the size of the next available data block in the player stream. The function reads the record header to determine the size of the next data block. If no valid record header is available the function returns 0. This function is thread-safe when used with different streams in separate threads. However, accessing the same stream from multiple threads simultaneously is not supported. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream Returns: number of bytes in data block function sdsPlayOpen Open player stream (read mode). sdsRecPlayId_t sdsPlayOpen ( const char * name, void * buf, uint32_t buf_size ) Opens a player stream for reading timestamp and data blocks from the SDS file. The buf parameter specifies a user-allocated memory region that serves as an internal circular buffer. The buffer size must be sufficient to accommodate at least the largest data block size plus 8 bytes for the record header. The name parameter specifies the base name of the SDS input file. The function attempts to locate and open the file <name>.<index>.sds , where <index> is an auto-incrementing value. If no matching file is found, the function returns an error. Note that this function can be blocking for some time as it initially fills the internal circular buffer with data from the SDS file. This function returns a handle that uniquely identifies the stream. The handle is used as a reference in subsequent function calls to perform operations on the stream. Parameters: name stream name (pointer to NULL terminated string) buf pointer to buffer for player stream buf_size buffer size in bytes Returns: sdsRecPlayId_t handle to SDS Recorder/Player stream or NULL if operation failed function sdsPlayRead uint32_t sdsPlayRead ( sdsRecPlayId_t id, uint32_t * timestamp, void * buf, uint32_t buf_size ) Reads a data block along with its associated timestamp from the internal circular buffer. The sdsRecPlayThread worker thread asynchronously reads the data from the SDS file using the underlying SDS I/O interface and writes it to the internal circular buffer. This approach ensures efficient, non-blocking data handling and optimal performance. Before reading, the function verifies that the user-provided buffer has sufficient space to accommodate the entire data block. If the buffer size is insufficient, the operation is aborted, and the function returns 0. Additionally, if the end-of-stream condition is reached, the function also returns 0. Therefore, it is necessary to call sdsPlayEndOfStream to identify whether the end-of-stream condition has been met. On success, the function reads the data block from the stream buffer, stores it in the user-provided buffer, and returns the number of bytes in the data block. Additionally, the timestamp associated with the data block is provided in the output parameter timestamp . Thread safety is maintained by allowing only one thread to read from an individual stream at a time. However, multiple threads can read from different streams concurrently, enabling parallel operations across multiple streams. /** function sdsRecClose Close recorder stream. int32_t sdsRecClose ( sdsRecPlayId_t id ) Closes a recorder stream. Before closing, any data remaining in the internal circular buffer is written to the SDS file. The function waits until all transfers are completed or a timeout occurs. The stream handle becomes invalid after successful closing. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream Returns: return code function sdsRecOpen Open recorder stream (write mode). sdsRecPlayId_t sdsRecOpen ( const char * name, void * buf, uint32_t buf_size ) Opens a recorder stream for writing timestamps and data blocks to the SDS file. The buf parameter specifies a user-allocated memory region that serves as an internal circular buffer. The buffer size must be sufficient to accommodate at least the largest data block size plus 8 bytes for the record header. The name parameter defines the base name for the SDS output file and is used to construct the file name in the format name.index.sds . The index is an auto-incrementing value that ensures a unique file name is generated. If a file with the specified name already exists, the index is incremented until a unique name is found. This function returns a handle that uniquely identifies the stream. The handle is used as a reference in subsequent function calls to perform operations on the stream. Parameters: name stream name (pointer to NULL terminated string) buf pointer to buffer for recorder stream buf_size buffer size in bytes Returns: sdsRecPlayId_t handle to SDS Recorder/Player stream or NULL if operation failed function sdsRecPlayInit Initialize recorder and player. int32_t sdsRecPlayInit ( sdsRecPlayEvent_t event_cb ) Initializes the SDS Recorder and Player system. This function allocates resources, initializes underlying SDS I/O interface and starts the sdsRecPlayThread worker thread. An optional callback function can be registered to receive notifications (e.g., I/O errors). This function must be called once before any recorder or player streams are opened. Parameters: event_cb pointer to sdsRecPlayEvent_t callback function Returns: return code function sdsRecPlayUninit Uninitialize recorder and player. int32_t sdsRecPlayUninit ( void ) De-initializes the SDS Recorder and Player system. The sdsRecPlayThread worker thread is stopped, and internal resources are released. All open recorder or player streams must be closed by the user before calling this function. Once uninitialized, the system must be initialized again before use. Returns: return code function sdsRecWrite Write entire data block along with its timestamp to the recorder stream. uint32_t sdsRecWrite ( sdsRecPlayId_t id, uint32_t timestamp, const void * buf, uint32_t buf_size ) Writes a data block with header (timestamp and size of data block) to the internal circular buffer. The sdsRecPlayThread worker thread asynchronously reads the data from the internal circular buffer and writes it to the SDS file using the underlying SDS I/O interface. This approach ensures efficient, non-blocking data handling and optimal performance. Before writing, the function ensures that the data block can fit into the internal buffer. If there is insufficient space, the operation is aborted, and the function returns 0. On success, the function writes the header and data block to the stream buffer and returns the number of data bytes written (excluding the header). Thread safety is maintained by allowing only one thread to write to an individual stream at a time. However, multiple threads can write to different streams concurrently, enabling parallel operations across multiple streams. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream timestamp timestamp in ticks buf pointer to the data block buffer to be written buf_size size of the data block buffer in bytes Returns: size of the entire data block written in bytes if the operation is successful, or 0 if the entire data block could not be written successfully","title":"Group SDS_Recorder_Player"},{"location":"SDS_API/group__SDS__Recorder__Player/#group-sds_recorder_player","text":"Modules > SDS_Recorder_Player sds_rec_play.h : SDS Recorder and Player for writing and reading SDS files via communication or file I/O interface. More...","title":"Group SDS_Recorder_Player"},{"location":"SDS_API/group__SDS__Recorder__Player/#public-types","text":"Type Name typedef void * sdsRecPlayId_t Handle to SDS Recorder/Player stream.","title":"Public Types"},{"location":"SDS_API/group__SDS__Recorder__Player/#public-functions","text":"Type Name int32_t sdsPlayClose ( sdsRecPlayId_t id) Close player stream. int32_t sdsPlayEndOfStream ( sdsRecPlayId_t id) Check if end of stream has been reached. uint32_t sdsPlayGetSize ( sdsRecPlayId_t id) Get data block size from Player stream. sdsRecPlayId_t sdsPlayOpen (const char * name, void * buf, uint32_t buf_size) Open player stream (read mode). uint32_t sdsPlayRead ( sdsRecPlayId_t id, uint32_t * timestamp, void * buf, uint32_t buf_size) int32_t sdsRecClose ( sdsRecPlayId_t id) Close recorder stream. sdsRecPlayId_t sdsRecOpen (const char * name, void * buf, uint32_t buf_size) Open recorder stream (write mode). int32_t sdsRecPlayInit (sdsRecPlayEvent_t event_cb) Initialize recorder and player. int32_t sdsRecPlayUninit (void) Uninitialize recorder and player. uint32_t sdsRecWrite ( sdsRecPlayId_t id, uint32_t timestamp, const void * buf, uint32_t buf_size) Write entire data block along with its timestamp to the recorder stream.","title":"Public Functions"},{"location":"SDS_API/group__SDS__Recorder__Player/#detailed-description","text":"via a communication stack, file system, or semihosting interface. Refer to the chapter SDS Interface for an overview.","title":"Detailed Description"},{"location":"SDS_API/group__SDS__Recorder__Player/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"SDS_API/group__SDS__Recorder__Player/#typedef-sdsrecplayid_t","text":"Handle to SDS Recorder/Player stream. typedef void* sdsRecPlayId_t; This pointer defines the handle to SDS recorder or player stream. It is used to identify a data stream across the different functions for the SDS Recorder and Player system.","title":"typedef sdsRecPlayId_t"},{"location":"SDS_API/group__SDS__Recorder__Player/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsplayclose","text":"Close player stream. int32_t sdsPlayClose ( sdsRecPlayId_t id ) Closes a player stream. The function waits until all transfers are completed or a timeout occurs. The stream handle becomes invalid after successful closing. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream Returns: return code","title":"function sdsPlayClose"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsplayendofstream","text":"Check if end of stream has been reached. int32_t sdsPlayEndOfStream ( sdsRecPlayId_t id ) Checks whether the player stream has reached the end of the SDS file. This condition is met when the SDS file signals end-of-stream and all buffered data has been read. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream Returns: nonzero if end of stream, else 0","title":"function sdsPlayEndOfStream"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsplaygetsize","text":"Get data block size from Player stream. uint32_t sdsPlayGetSize ( sdsRecPlayId_t id ) Returns the size of the next available data block in the player stream. The function reads the record header to determine the size of the next data block. If no valid record header is available the function returns 0. This function is thread-safe when used with different streams in separate threads. However, accessing the same stream from multiple threads simultaneously is not supported. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream Returns: number of bytes in data block","title":"function sdsPlayGetSize"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsplayopen","text":"Open player stream (read mode). sdsRecPlayId_t sdsPlayOpen ( const char * name, void * buf, uint32_t buf_size ) Opens a player stream for reading timestamp and data blocks from the SDS file. The buf parameter specifies a user-allocated memory region that serves as an internal circular buffer. The buffer size must be sufficient to accommodate at least the largest data block size plus 8 bytes for the record header. The name parameter specifies the base name of the SDS input file. The function attempts to locate and open the file <name>.<index>.sds , where <index> is an auto-incrementing value. If no matching file is found, the function returns an error. Note that this function can be blocking for some time as it initially fills the internal circular buffer with data from the SDS file. This function returns a handle that uniquely identifies the stream. The handle is used as a reference in subsequent function calls to perform operations on the stream. Parameters: name stream name (pointer to NULL terminated string) buf pointer to buffer for player stream buf_size buffer size in bytes Returns: sdsRecPlayId_t handle to SDS Recorder/Player stream or NULL if operation failed","title":"function sdsPlayOpen"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsplayread","text":"uint32_t sdsPlayRead ( sdsRecPlayId_t id, uint32_t * timestamp, void * buf, uint32_t buf_size ) Reads a data block along with its associated timestamp from the internal circular buffer. The sdsRecPlayThread worker thread asynchronously reads the data from the SDS file using the underlying SDS I/O interface and writes it to the internal circular buffer. This approach ensures efficient, non-blocking data handling and optimal performance. Before reading, the function verifies that the user-provided buffer has sufficient space to accommodate the entire data block. If the buffer size is insufficient, the operation is aborted, and the function returns 0. Additionally, if the end-of-stream condition is reached, the function also returns 0. Therefore, it is necessary to call sdsPlayEndOfStream to identify whether the end-of-stream condition has been met. On success, the function reads the data block from the stream buffer, stores it in the user-provided buffer, and returns the number of bytes in the data block. Additionally, the timestamp associated with the data block is provided in the output parameter timestamp . Thread safety is maintained by allowing only one thread to read from an individual stream at a time. However, multiple threads can read from different streams concurrently, enabling parallel operations across multiple streams. /**","title":"function sdsPlayRead"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsrecclose","text":"Close recorder stream. int32_t sdsRecClose ( sdsRecPlayId_t id ) Closes a recorder stream. Before closing, any data remaining in the internal circular buffer is written to the SDS file. The function waits until all transfers are completed or a timeout occurs. The stream handle becomes invalid after successful closing. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream Returns: return code","title":"function sdsRecClose"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsrecopen","text":"Open recorder stream (write mode). sdsRecPlayId_t sdsRecOpen ( const char * name, void * buf, uint32_t buf_size ) Opens a recorder stream for writing timestamps and data blocks to the SDS file. The buf parameter specifies a user-allocated memory region that serves as an internal circular buffer. The buffer size must be sufficient to accommodate at least the largest data block size plus 8 bytes for the record header. The name parameter defines the base name for the SDS output file and is used to construct the file name in the format name.index.sds . The index is an auto-incrementing value that ensures a unique file name is generated. If a file with the specified name already exists, the index is incremented until a unique name is found. This function returns a handle that uniquely identifies the stream. The handle is used as a reference in subsequent function calls to perform operations on the stream. Parameters: name stream name (pointer to NULL terminated string) buf pointer to buffer for recorder stream buf_size buffer size in bytes Returns: sdsRecPlayId_t handle to SDS Recorder/Player stream or NULL if operation failed","title":"function sdsRecOpen"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsrecplayinit","text":"Initialize recorder and player. int32_t sdsRecPlayInit ( sdsRecPlayEvent_t event_cb ) Initializes the SDS Recorder and Player system. This function allocates resources, initializes underlying SDS I/O interface and starts the sdsRecPlayThread worker thread. An optional callback function can be registered to receive notifications (e.g., I/O errors). This function must be called once before any recorder or player streams are opened. Parameters: event_cb pointer to sdsRecPlayEvent_t callback function Returns: return code","title":"function sdsRecPlayInit"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsrecplayuninit","text":"Uninitialize recorder and player. int32_t sdsRecPlayUninit ( void ) De-initializes the SDS Recorder and Player system. The sdsRecPlayThread worker thread is stopped, and internal resources are released. All open recorder or player streams must be closed by the user before calling this function. Once uninitialized, the system must be initialized again before use. Returns: return code","title":"function sdsRecPlayUninit"},{"location":"SDS_API/group__SDS__Recorder__Player/#function-sdsrecwrite","text":"Write entire data block along with its timestamp to the recorder stream. uint32_t sdsRecWrite ( sdsRecPlayId_t id, uint32_t timestamp, const void * buf, uint32_t buf_size ) Writes a data block with header (timestamp and size of data block) to the internal circular buffer. The sdsRecPlayThread worker thread asynchronously reads the data from the internal circular buffer and writes it to the SDS file using the underlying SDS I/O interface. This approach ensures efficient, non-blocking data handling and optimal performance. Before writing, the function ensures that the data block can fit into the internal buffer. If there is insufficient space, the operation is aborted, and the function returns 0. On success, the function writes the header and data block to the stream buffer and returns the number of data bytes written (excluding the header). Thread safety is maintained by allowing only one thread to write to an individual stream at a time. However, multiple threads can write to different streams concurrently, enabling parallel operations across multiple streams. Parameters: id sdsRecPlayId_t handle to SDS Recorder/Player stream timestamp timestamp in ticks buf pointer to the data block buffer to be written buf_size size of the data block buffer in bytes Returns: size of the entire data block written in bytes if the operation is successful, or 0 if the entire data block could not be written successfully","title":"function sdsRecWrite"},{"location":"SDS_API/dir_d8edc0eab7a99ea71a7d0245c268925a/","text":"Dir sds FileList > sds Directories Type Name dir include The documentation for this class was generated from the following file sds/","title":"Dir sds"},{"location":"SDS_API/dir_d8edc0eab7a99ea71a7d0245c268925a/#dir-sds","text":"FileList > sds","title":"Dir sds"},{"location":"SDS_API/dir_d8edc0eab7a99ea71a7d0245c268925a/#directories","text":"Type Name dir include The documentation for this class was generated from the following file sds/","title":"Directories"},{"location":"SDS_API/dir_d09908635ef304ba819d3349bcb716bf/","text":"Dir sds/include FileList > include Files Type Name file sds_buffer.h file sds_rec_play.h file sdsio.h file sdsio_client.h The documentation for this class was generated from the following file sds/include/","title":"Dir sds/include"},{"location":"SDS_API/dir_d09908635ef304ba819d3349bcb716bf/#dir-sdsinclude","text":"FileList > include","title":"Dir sds/include"},{"location":"SDS_API/dir_d09908635ef304ba819d3349bcb716bf/#files","text":"Type Name file sds_buffer.h file sds_rec_play.h file sdsio.h file sdsio_client.h The documentation for this class was generated from the following file sds/include/","title":"Files"},{"location":"SDS_API/sds__buffer_8h/","text":"File sds_buffer.h FileList > include > sds_buffer.h Go to the source code of this file #include <stdint.h> Macros Type Name define SDS_BUFFER_ERROR (-1) Operation failed. define SDS_BUFFER_EVENT_DATA_HIGH (1UL &lt;&lt; 1) Data above or equal to threshold. define SDS_BUFFER_EVENT_DATA_LOW (1UL &lt;&lt; 0) Events. define SDS_BUFFER_OK (0) Function return codes. Macro Definition Documentation define SDS_BUFFER_ERROR Operation failed. #define SDS_BUFFER_ERROR `(-1)` define SDS_BUFFER_EVENT_DATA_HIGH Data above or equal to threshold. #define SDS_BUFFER_EVENT_DATA_HIGH `(1UL << 1)` define SDS_BUFFER_EVENT_DATA_LOW Events. #define SDS_BUFFER_EVENT_DATA_LOW `(1UL << 0)` Data bellow or equal to threshold define SDS_BUFFER_OK Function return codes. #define SDS_BUFFER_OK `(0)` Operation completed successfully The documentation for this class was generated from the following file sds/include/sds_buffer.h","title":"File sds_buffer.h"},{"location":"SDS_API/sds__buffer_8h/#file-sds_bufferh","text":"FileList > include > sds_buffer.h Go to the source code of this file #include <stdint.h>","title":"File sds_buffer.h"},{"location":"SDS_API/sds__buffer_8h/#macros","text":"Type Name define SDS_BUFFER_ERROR (-1) Operation failed. define SDS_BUFFER_EVENT_DATA_HIGH (1UL &lt;&lt; 1) Data above or equal to threshold. define SDS_BUFFER_EVENT_DATA_LOW (1UL &lt;&lt; 0) Events. define SDS_BUFFER_OK (0) Function return codes.","title":"Macros"},{"location":"SDS_API/sds__buffer_8h/#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"SDS_API/sds__buffer_8h/#define-sds_buffer_error","text":"Operation failed. #define SDS_BUFFER_ERROR `(-1)`","title":"define SDS_BUFFER_ERROR"},{"location":"SDS_API/sds__buffer_8h/#define-sds_buffer_event_data_high","text":"Data above or equal to threshold. #define SDS_BUFFER_EVENT_DATA_HIGH `(1UL << 1)`","title":"define SDS_BUFFER_EVENT_DATA_HIGH"},{"location":"SDS_API/sds__buffer_8h/#define-sds_buffer_event_data_low","text":"Events. #define SDS_BUFFER_EVENT_DATA_LOW `(1UL << 0)` Data bellow or equal to threshold","title":"define SDS_BUFFER_EVENT_DATA_LOW"},{"location":"SDS_API/sds__buffer_8h/#define-sds_buffer_ok","text":"Function return codes. #define SDS_BUFFER_OK `(0)` Operation completed successfully The documentation for this class was generated from the following file sds/include/sds_buffer.h","title":"define SDS_BUFFER_OK"},{"location":"SDS_API/sds__buffer_8h_source/","text":"File sds_buffer.h File List > include > sds_buffer.h Go to the documentation of this file /* * Copyright (c) 2022-2025 Arm Limited. All rights reserved. * * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the License); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an AS IS BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ #ifndef SDS_BUFFER_H #define SDS_BUFFER_H #ifdef __cplusplus extern \"C\" { #endif #include <stdint.h> // ==== Synchronous Data Stream (SDS) Buffer ==== typedef void *sdsBufferId_t; #define SDS_BUFFER_OK (0) #define SDS_BUFFER_ERROR (-1) #define SDS_BUFFER_EVENT_DATA_LOW (1UL << 0) #define SDS_BUFFER_EVENT_DATA_HIGH (1UL << 1) typedef void (*sdsBufferEvent_t) (sdsBufferId_t id, uint32_t event, void *arg); sdsBufferId_t sdsBufferOpen (void *buf, uint32_t buf_size, uint32_t threshold_low, uint32_t threshold_high); int32_t sdsBufferClose (sdsBufferId_t id); int32_t sdsBufferRegisterEvents (sdsBufferId_t id, sdsBufferEvent_t event_cb, uint32_t event_mask, void *event_arg); uint32_t sdsBufferWrite (sdsBufferId_t id, const void *buf, uint32_t buf_size); uint32_t sdsBufferRead (sdsBufferId_t id, void *buf, uint32_t buf_size); int32_t sdsBufferClear (sdsBufferId_t id); uint32_t sdsBufferGetCount (sdsBufferId_t id); #ifdef __cplusplus } #endif #endif /* SDS_BUFFER_H */","title":"File sds_buffer.h"},{"location":"SDS_API/sds__buffer_8h_source/#file-sds_bufferh","text":"File List > include > sds_buffer.h Go to the documentation of this file /* * Copyright (c) 2022-2025 Arm Limited. All rights reserved. * * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the License); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an AS IS BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ #ifndef SDS_BUFFER_H #define SDS_BUFFER_H #ifdef __cplusplus extern \"C\" { #endif #include <stdint.h> // ==== Synchronous Data Stream (SDS) Buffer ==== typedef void *sdsBufferId_t; #define SDS_BUFFER_OK (0) #define SDS_BUFFER_ERROR (-1) #define SDS_BUFFER_EVENT_DATA_LOW (1UL << 0) #define SDS_BUFFER_EVENT_DATA_HIGH (1UL << 1) typedef void (*sdsBufferEvent_t) (sdsBufferId_t id, uint32_t event, void *arg); sdsBufferId_t sdsBufferOpen (void *buf, uint32_t buf_size, uint32_t threshold_low, uint32_t threshold_high); int32_t sdsBufferClose (sdsBufferId_t id); int32_t sdsBufferRegisterEvents (sdsBufferId_t id, sdsBufferEvent_t event_cb, uint32_t event_mask, void *event_arg); uint32_t sdsBufferWrite (sdsBufferId_t id, const void *buf, uint32_t buf_size); uint32_t sdsBufferRead (sdsBufferId_t id, void *buf, uint32_t buf_size); int32_t sdsBufferClear (sdsBufferId_t id); uint32_t sdsBufferGetCount (sdsBufferId_t id); #ifdef __cplusplus } #endif #endif /* SDS_BUFFER_H */","title":"File sds_buffer.h"},{"location":"SDS_API/sds__rec__play_8h/","text":"File sds_rec_play.h FileList > include > sds_rec_play.h Go to the source code of this file #include <stdint.h> Public Types Type Name typedef void(* sdsRecPlayEvent_t Call back function for recorder and player events. Macros Type Name define SDS_REC_PLAY_ERROR (-1) Operation failed. define SDS_REC_PLAY_ERROR_TIMEOUT (-2) Operation failed: Timeout. define SDS_REC_PLAY_EVENT_IO_ERROR (1UL &lt;&lt; 0) Event codes. define SDS_REC_PLAY_OK (0) Function return codes. Public Types Documentation typedef sdsRecPlayEvent_t Call back function for recorder and player events. typedef void(* sdsRecPlayEvent_t) (sdsRecPlayId_t id, uint32_t event); Parameters: id handle to SDS Recorder/Player stream event event code Macro Definition Documentation define SDS_REC_PLAY_ERROR Operation failed. #define SDS_REC_PLAY_ERROR `(-1)` define SDS_REC_PLAY_ERROR_TIMEOUT Operation failed: Timeout. #define SDS_REC_PLAY_ERROR_TIMEOUT `(-2)` define SDS_REC_PLAY_EVENT_IO_ERROR Event codes. #define SDS_REC_PLAY_EVENT_IO_ERROR `(1UL << 0)` I/O Error define SDS_REC_PLAY_OK Function return codes. #define SDS_REC_PLAY_OK `(0)` Operation completed successfully The documentation for this class was generated from the following file sds/include/sds_rec_play.h","title":"File sds_rec_play.h"},{"location":"SDS_API/sds__rec__play_8h/#file-sds_rec_playh","text":"FileList > include > sds_rec_play.h Go to the source code of this file #include <stdint.h>","title":"File sds_rec_play.h"},{"location":"SDS_API/sds__rec__play_8h/#public-types","text":"Type Name typedef void(* sdsRecPlayEvent_t Call back function for recorder and player events.","title":"Public Types"},{"location":"SDS_API/sds__rec__play_8h/#macros","text":"Type Name define SDS_REC_PLAY_ERROR (-1) Operation failed. define SDS_REC_PLAY_ERROR_TIMEOUT (-2) Operation failed: Timeout. define SDS_REC_PLAY_EVENT_IO_ERROR (1UL &lt;&lt; 0) Event codes. define SDS_REC_PLAY_OK (0) Function return codes.","title":"Macros"},{"location":"SDS_API/sds__rec__play_8h/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"SDS_API/sds__rec__play_8h/#typedef-sdsrecplayevent_t","text":"Call back function for recorder and player events. typedef void(* sdsRecPlayEvent_t) (sdsRecPlayId_t id, uint32_t event); Parameters: id handle to SDS Recorder/Player stream event event code","title":"typedef sdsRecPlayEvent_t"},{"location":"SDS_API/sds__rec__play_8h/#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"SDS_API/sds__rec__play_8h/#define-sds_rec_play_error","text":"Operation failed. #define SDS_REC_PLAY_ERROR `(-1)`","title":"define SDS_REC_PLAY_ERROR"},{"location":"SDS_API/sds__rec__play_8h/#define-sds_rec_play_error_timeout","text":"Operation failed: Timeout. #define SDS_REC_PLAY_ERROR_TIMEOUT `(-2)`","title":"define SDS_REC_PLAY_ERROR_TIMEOUT"},{"location":"SDS_API/sds__rec__play_8h/#define-sds_rec_play_event_io_error","text":"Event codes. #define SDS_REC_PLAY_EVENT_IO_ERROR `(1UL << 0)` I/O Error","title":"define SDS_REC_PLAY_EVENT_IO_ERROR"},{"location":"SDS_API/sds__rec__play_8h/#define-sds_rec_play_ok","text":"Function return codes. #define SDS_REC_PLAY_OK `(0)` Operation completed successfully The documentation for this class was generated from the following file sds/include/sds_rec_play.h","title":"define SDS_REC_PLAY_OK"},{"location":"SDS_API/sds__rec__play_8h_source/","text":"File sds_rec_play.h File List > include > sds_rec_play.h Go to the documentation of this file /* * Copyright (c) 2025 Arm Limited. All rights reserved. * * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the License); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an AS IS BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ #ifndef SDS_REC_PLAY_H #define SDS_REC_PLAY_H #ifdef __cplusplus extern \"C\" { #endif #include <stdint.h> // ==== SDS Recorder and Player ==== typedef void *sdsRecPlayId_t; #define SDS_REC_PLAY_OK (0) #define SDS_REC_PLAY_ERROR (-1) #define SDS_REC_PLAY_ERROR_TIMEOUT (-2) #define SDS_REC_PLAY_EVENT_IO_ERROR (1UL << 0) typedef void (*sdsRecPlayEvent_t) (sdsRecPlayId_t id, uint32_t event); int32_t sdsRecPlayInit (sdsRecPlayEvent_t event_cb); int32_t sdsRecPlayUninit (void); sdsRecPlayId_t sdsRecOpen (const char *name, void *buf, uint32_t buf_size); int32_t sdsRecClose (sdsRecPlayId_t id); uint32_t sdsRecWrite (sdsRecPlayId_t id, uint32_t timestamp, const void *buf, uint32_t buf_size); sdsRecPlayId_t sdsPlayOpen (const char *name, void *buf, uint32_t buf_size); int32_t sdsPlayClose (sdsRecPlayId_t id); uint32_t sdsPlayRead (sdsRecPlayId_t id, uint32_t *timestamp, void *buf, uint32_t buf_size); uint32_t sdsPlayGetSize (sdsRecPlayId_t id); int32_t sdsPlayEndOfStream (sdsRecPlayId_t id); #ifdef __cplusplus } #endif #endif /* SDS_REC_PLAY_H */","title":"File sds_rec_play.h"},{"location":"SDS_API/sds__rec__play_8h_source/#file-sds_rec_playh","text":"File List > include > sds_rec_play.h Go to the documentation of this file /* * Copyright (c) 2025 Arm Limited. All rights reserved. * * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the License); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an AS IS BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ #ifndef SDS_REC_PLAY_H #define SDS_REC_PLAY_H #ifdef __cplusplus extern \"C\" { #endif #include <stdint.h> // ==== SDS Recorder and Player ==== typedef void *sdsRecPlayId_t; #define SDS_REC_PLAY_OK (0) #define SDS_REC_PLAY_ERROR (-1) #define SDS_REC_PLAY_ERROR_TIMEOUT (-2) #define SDS_REC_PLAY_EVENT_IO_ERROR (1UL << 0) typedef void (*sdsRecPlayEvent_t) (sdsRecPlayId_t id, uint32_t event); int32_t sdsRecPlayInit (sdsRecPlayEvent_t event_cb); int32_t sdsRecPlayUninit (void); sdsRecPlayId_t sdsRecOpen (const char *name, void *buf, uint32_t buf_size); int32_t sdsRecClose (sdsRecPlayId_t id); uint32_t sdsRecWrite (sdsRecPlayId_t id, uint32_t timestamp, const void *buf, uint32_t buf_size); sdsRecPlayId_t sdsPlayOpen (const char *name, void *buf, uint32_t buf_size); int32_t sdsPlayClose (sdsRecPlayId_t id); uint32_t sdsPlayRead (sdsRecPlayId_t id, uint32_t *timestamp, void *buf, uint32_t buf_size); uint32_t sdsPlayGetSize (sdsRecPlayId_t id); int32_t sdsPlayEndOfStream (sdsRecPlayId_t id); #ifdef __cplusplus } #endif #endif /* SDS_REC_PLAY_H */","title":"File sds_rec_play.h"},{"location":"SDS_API/sdsio_8h/","text":"File sdsio.h FileList > include > sdsio.h Go to the source code of this file #include <stdint.h> Public Functions Type Name int32_t sdsioInit (void) Macros Type Name define SDSIO_ERROR (-1) Operation failed. define SDSIO_OK (0) Function return codes. Public Functions Documentation function sdsioInit int32_t sdsioInit ( void ) Macro Definition Documentation define SDSIO_ERROR Operation failed. #define SDSIO_ERROR `(-1)` define SDSIO_OK Function return codes. #define SDSIO_OK `(0)` Operation completed successfully The documentation for this class was generated from the following file sds/include/sdsio.h","title":"File sdsio.h"},{"location":"SDS_API/sdsio_8h/#file-sdsioh","text":"FileList > include > sdsio.h Go to the source code of this file #include <stdint.h>","title":"File sdsio.h"},{"location":"SDS_API/sdsio_8h/#public-functions","text":"Type Name int32_t sdsioInit (void)","title":"Public Functions"},{"location":"SDS_API/sdsio_8h/#macros","text":"Type Name define SDSIO_ERROR (-1) Operation failed. define SDSIO_OK (0) Function return codes.","title":"Macros"},{"location":"SDS_API/sdsio_8h/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"SDS_API/sdsio_8h/#function-sdsioinit","text":"int32_t sdsioInit ( void )","title":"function sdsioInit"},{"location":"SDS_API/sdsio_8h/#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"SDS_API/sdsio_8h/#define-sdsio_error","text":"Operation failed. #define SDSIO_ERROR `(-1)`","title":"define SDSIO_ERROR"},{"location":"SDS_API/sdsio_8h/#define-sdsio_ok","text":"Function return codes. #define SDSIO_OK `(0)` Operation completed successfully The documentation for this class was generated from the following file sds/include/sdsio.h","title":"define SDSIO_OK"},{"location":"SDS_API/sdsio_8h_source/","text":"File sdsio.h File List > include > sdsio.h Go to the documentation of this file /* * Copyright (c) 2022-2023 Arm Limited. All rights reserved. * * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the License); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an AS IS BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ #ifndef SDSIO_H #define SDSIO_H #ifdef __cplusplus extern \"C\" { #endif #include <stdint.h> // ==== Synchronous Data Stream Input/Output (SDS I/O) ==== typedef void *sdsioId_t; typedef enum { sdsioModeRead = 0, sdsioModeWrite = 1 } sdsioMode_t; #define SDSIO_OK (0) #define SDSIO_ERROR (-1) int32_t sdsioInit (void); int32_t sdsioUninit (void); sdsioId_t sdsioOpen (const char *name, sdsioMode_t mode); int32_t sdsioClose (sdsioId_t id); uint32_t sdsioWrite (sdsioId_t id, const void *buf, uint32_t buf_size); uint32_t sdsioRead (sdsioId_t id, void *buf, uint32_t buf_size); int32_t sdsioEndOfStream (sdsioId_t id); #ifdef __cplusplus } #endif #endif /* SDSIO_H */","title":"File sdsio.h"},{"location":"SDS_API/sdsio_8h_source/#file-sdsioh","text":"File List > include > sdsio.h Go to the documentation of this file /* * Copyright (c) 2022-2023 Arm Limited. All rights reserved. * * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the License); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an AS IS BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ #ifndef SDSIO_H #define SDSIO_H #ifdef __cplusplus extern \"C\" { #endif #include <stdint.h> // ==== Synchronous Data Stream Input/Output (SDS I/O) ==== typedef void *sdsioId_t; typedef enum { sdsioModeRead = 0, sdsioModeWrite = 1 } sdsioMode_t; #define SDSIO_OK (0) #define SDSIO_ERROR (-1) int32_t sdsioInit (void); int32_t sdsioUninit (void); sdsioId_t sdsioOpen (const char *name, sdsioMode_t mode); int32_t sdsioClose (sdsioId_t id); uint32_t sdsioWrite (sdsioId_t id, const void *buf, uint32_t buf_size); uint32_t sdsioRead (sdsioId_t id, void *buf, uint32_t buf_size); int32_t sdsioEndOfStream (sdsioId_t id); #ifdef __cplusplus } #endif #endif /* SDSIO_H */","title":"File sdsio.h"},{"location":"SDS_API/sdsio__client_8h/","text":"File sdsio_client.h FileList > include > sdsio_client.h Go to the source code of this file Classes Type Name struct header_t Public Functions Type Name int32_t sdsioClientInit (void) Initialize SDS I/O Client. uint32_t sdsioClientReceive ( header_t * header, void * data, uint32_t data_size) Receive data from SDSIO-Server. uint32_t sdsioClientSend (const header_t * header, const void * data, uint32_t data_size) Send data to SDSIO-Server. int32_t sdsioClientUninit (void) Un-Initialize SDS I/O Client. Macros Type Name define SDSIO_CMD_CLOSE 2U define SDSIO_CMD_EOS 5U define SDSIO_CMD_OPEN 1U define SDSIO_CMD_READ 4U define SDSIO_CMD_WRITE 3U Public Functions Documentation function sdsioClientInit Initialize SDS I/O Client. int32_t sdsioClientInit ( void ) Returns: SDIOS_OK: initialization success SDSIO_ERROR: initialization failed function sdsioClientReceive Receive data from SDSIO-Server. uint32_t sdsioClientReceive ( header_t * header, void * data, uint32_t data_size ) Parameters: header pointer to header data pointer to buffer for data to read data_size data size in bytes Returns: number of bytes received (including header) function sdsioClientSend Send data to SDSIO-Server. uint32_t sdsioClientSend ( const header_t * header, const void * data, uint32_t data_size ) Parameters: header pointer to header data pointer to buffer with data to send data_size data size in bytes Returns: number of bytes sent (including header) function sdsioClientUninit Un-Initialize SDS I/O Client. int32_t sdsioClientUninit ( void ) Returns: SDIOS_OK: un-initialization success SDSIO_ERROR: un-initialization failed Macro Definition Documentation define SDSIO_CMD_CLOSE #define SDSIO_CMD_CLOSE `2U` define SDSIO_CMD_EOS #define SDSIO_CMD_EOS `5U` define SDSIO_CMD_OPEN #define SDSIO_CMD_OPEN `1U` define SDSIO_CMD_READ #define SDSIO_CMD_READ `4U` define SDSIO_CMD_WRITE #define SDSIO_CMD_WRITE `3U` The documentation for this class was generated from the following file sds/include/sdsio_client.h","title":"File sdsio_client.h"},{"location":"SDS_API/sdsio__client_8h/#file-sdsio_clienth","text":"FileList > include > sdsio_client.h Go to the source code of this file","title":"File sdsio_client.h"},{"location":"SDS_API/sdsio__client_8h/#classes","text":"Type Name struct header_t","title":"Classes"},{"location":"SDS_API/sdsio__client_8h/#public-functions","text":"Type Name int32_t sdsioClientInit (void) Initialize SDS I/O Client. uint32_t sdsioClientReceive ( header_t * header, void * data, uint32_t data_size) Receive data from SDSIO-Server. uint32_t sdsioClientSend (const header_t * header, const void * data, uint32_t data_size) Send data to SDSIO-Server. int32_t sdsioClientUninit (void) Un-Initialize SDS I/O Client.","title":"Public Functions"},{"location":"SDS_API/sdsio__client_8h/#macros","text":"Type Name define SDSIO_CMD_CLOSE 2U define SDSIO_CMD_EOS 5U define SDSIO_CMD_OPEN 1U define SDSIO_CMD_READ 4U define SDSIO_CMD_WRITE 3U","title":"Macros"},{"location":"SDS_API/sdsio__client_8h/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"SDS_API/sdsio__client_8h/#function-sdsioclientinit","text":"Initialize SDS I/O Client. int32_t sdsioClientInit ( void ) Returns: SDIOS_OK: initialization success SDSIO_ERROR: initialization failed","title":"function sdsioClientInit"},{"location":"SDS_API/sdsio__client_8h/#function-sdsioclientreceive","text":"Receive data from SDSIO-Server. uint32_t sdsioClientReceive ( header_t * header, void * data, uint32_t data_size ) Parameters: header pointer to header data pointer to buffer for data to read data_size data size in bytes Returns: number of bytes received (including header)","title":"function sdsioClientReceive"},{"location":"SDS_API/sdsio__client_8h/#function-sdsioclientsend","text":"Send data to SDSIO-Server. uint32_t sdsioClientSend ( const header_t * header, const void * data, uint32_t data_size ) Parameters: header pointer to header data pointer to buffer with data to send data_size data size in bytes Returns: number of bytes sent (including header)","title":"function sdsioClientSend"},{"location":"SDS_API/sdsio__client_8h/#function-sdsioclientuninit","text":"Un-Initialize SDS I/O Client. int32_t sdsioClientUninit ( void ) Returns: SDIOS_OK: un-initialization success SDSIO_ERROR: un-initialization failed","title":"function sdsioClientUninit"},{"location":"SDS_API/sdsio__client_8h/#macro-definition-documentation","text":"","title":"Macro Definition Documentation"},{"location":"SDS_API/sdsio__client_8h/#define-sdsio_cmd_close","text":"#define SDSIO_CMD_CLOSE `2U`","title":"define SDSIO_CMD_CLOSE"},{"location":"SDS_API/sdsio__client_8h/#define-sdsio_cmd_eos","text":"#define SDSIO_CMD_EOS `5U`","title":"define SDSIO_CMD_EOS"},{"location":"SDS_API/sdsio__client_8h/#define-sdsio_cmd_open","text":"#define SDSIO_CMD_OPEN `1U`","title":"define SDSIO_CMD_OPEN"},{"location":"SDS_API/sdsio__client_8h/#define-sdsio_cmd_read","text":"#define SDSIO_CMD_READ `4U`","title":"define SDSIO_CMD_READ"},{"location":"SDS_API/sdsio__client_8h/#define-sdsio_cmd_write","text":"#define SDSIO_CMD_WRITE `3U` The documentation for this class was generated from the following file sds/include/sdsio_client.h","title":"define SDSIO_CMD_WRITE"},{"location":"SDS_API/sdsio__client_8h_source/","text":"File sdsio_client.h File List > include > sdsio_client.h Go to the documentation of this file /* * Copyright (c) 2025 Arm Limited. All rights reserved. * * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the License); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an AS IS BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ #ifndef SDSIO_CLIENT_H #define SDSIO_CLIENT_H #ifdef __cplusplus extern \"C\" { #endif // SDSIO Client works in pair with SDSIO Server. Communication protocol is documented in the following link: // https://arm-software.github.io/SDS-Framework/main/theory/#sdsio-server-protocol // SDS I/O header typedef struct { uint32_t command; uint32_t sdsio_id; uint32_t argument; uint32_t data_size; } header_t; // Commands #define SDSIO_CMD_OPEN 1U #define SDSIO_CMD_CLOSE 2U #define SDSIO_CMD_WRITE 3U #define SDSIO_CMD_READ 4U #define SDSIO_CMD_EOS 5U // Function prototypes int32_t sdsioClientInit (void); int32_t sdsioClientUninit (void); uint32_t sdsioClientSend (const header_t *header, const void *data, uint32_t data_size); uint32_t sdsioClientReceive (header_t *header, void *data, uint32_t data_size); #ifdef __cplusplus } #endif #endif /* SDSIO_CLIENT_H */","title":"File sdsio_client.h"},{"location":"SDS_API/sdsio__client_8h_source/#file-sdsio_clienth","text":"File List > include > sdsio_client.h Go to the documentation of this file /* * Copyright (c) 2025 Arm Limited. All rights reserved. * * SPDX-License-Identifier: Apache-2.0 * * Licensed under the Apache License, Version 2.0 (the License); you may * not use this file except in compliance with the License. * You may obtain a copy of the License at * * www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an AS IS BASIS, WITHOUT * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ #ifndef SDSIO_CLIENT_H #define SDSIO_CLIENT_H #ifdef __cplusplus extern \"C\" { #endif // SDSIO Client works in pair with SDSIO Server. Communication protocol is documented in the following link: // https://arm-software.github.io/SDS-Framework/main/theory/#sdsio-server-protocol // SDS I/O header typedef struct { uint32_t command; uint32_t sdsio_id; uint32_t argument; uint32_t data_size; } header_t; // Commands #define SDSIO_CMD_OPEN 1U #define SDSIO_CMD_CLOSE 2U #define SDSIO_CMD_WRITE 3U #define SDSIO_CMD_READ 4U #define SDSIO_CMD_EOS 5U // Function prototypes int32_t sdsioClientInit (void); int32_t sdsioClientUninit (void); uint32_t sdsioClientSend (const header_t *header, const void *data, uint32_t data_size); uint32_t sdsioClientReceive (header_t *header, void *data, uint32_t data_size); #ifdef __cplusplus } #endif #endif /* SDSIO_CLIENT_H */","title":"File sdsio_client.h"},{"location":"SDS_API/sds_8txt/","text":"File sds.txt FileList > sds.txt Go to the source code of this file The documentation for this class was generated from the following file sds/include/sds.txt","title":"File sds.txt"},{"location":"SDS_API/sds_8txt/#file-sdstxt","text":"FileList > sds.txt Go to the source code of this file The documentation for this class was generated from the following file sds/include/sds.txt","title":"File sds.txt"},{"location":"SDS_API/sds_8txt_source/","text":"File sds.txt File List > sds.txt Go to the documentation of this file /*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/ // end group SDS_Circular_Buffer /*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/ int32_t sdsioInit (void); // end group SDS_Circular_Buffer /*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/ */ // end group SDS_Recorder_Player /*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/ // end group Defines","title":"File sds.txt"},{"location":"SDS_API/sds_8txt_source/#file-sdstxt","text":"File List > sds.txt Go to the documentation of this file /*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/ // end group SDS_Circular_Buffer /*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/ int32_t sdsioInit (void); // end group SDS_Circular_Buffer /*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/ */ // end group SDS_Recorder_Player /*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/ // end group Defines","title":"File sds.txt"},{"location":"SDS_API/namespaces/","text":"Namespace List Here is a list of all namespaces with brief descriptions:","title":"Namespace List"},{"location":"SDS_API/namespaces/#namespace-list","text":"Here is a list of all namespaces with brief descriptions:","title":"Namespace List"},{"location":"SDS_API/classes/","text":"Class Index h header_t","title":"Class Index"},{"location":"SDS_API/classes/#class-index","text":"","title":"Class Index"},{"location":"SDS_API/classes/#h","text":"header_t","title":"h"},{"location":"SDS_API/hierarchy/","text":"Class Hierarchy This inheritance list is sorted roughly, but not completely, alphabetically: struct header_t","title":"Class Hierarchy"},{"location":"SDS_API/hierarchy/#class-hierarchy","text":"This inheritance list is sorted roughly, but not completely, alphabetically: struct header_t","title":"Class Hierarchy"},{"location":"SDS_API/modules/","text":"Modules Here is a list of all modules: Define Values SDS Error Codes SDS Player Error Codes. SDS Event Codes SDS Player Event Codes. SDS Circular Buffer sds.h: SDS circular buffer handling for data streams SDS I/O Interface sdsio.h : SDS I/O Interface for data streams SDS Recorder and Player sds_rec_play.h : SDS Recorder and Player for writing and reading SDS files via communication or file I/O interface.","title":"API Modules"},{"location":"SDS_API/modules/#modules","text":"Here is a list of all modules: Define Values SDS Error Codes SDS Player Error Codes. SDS Event Codes SDS Player Event Codes. SDS Circular Buffer sds.h: SDS circular buffer handling for data streams SDS I/O Interface sdsio.h : SDS I/O Interface for data streams SDS Recorder and Player sds_rec_play.h : SDS Recorder and Player for writing and reading SDS files via communication or file I/O interface.","title":"Modules"},{"location":"SDS_API/pages/","text":"Related Pages Here is a list of all related documentation pages:","title":"Related Pages"},{"location":"SDS_API/pages/#related-pages","text":"Here is a list of all related documentation pages:","title":"Related Pages"},{"location":"SDS_API/class_members/","text":"Class Members a argument ( header_t ) c command ( header_t ) d data_size ( header_t ) s sdsio_id ( header_t )","title":"Class Members"},{"location":"SDS_API/class_members/#class-members","text":"","title":"Class Members"},{"location":"SDS_API/class_members/#a","text":"argument ( header_t )","title":"a"},{"location":"SDS_API/class_members/#c","text":"command ( header_t )","title":"c"},{"location":"SDS_API/class_members/#d","text":"data_size ( header_t )","title":"d"},{"location":"SDS_API/class_members/#s","text":"sdsio_id ( header_t )","title":"s"},{"location":"SDS_API/class_member_functions/","text":"Class Member Functions Nothing related to Class Member Functions found.","title":"Class Member Functions"},{"location":"SDS_API/class_member_functions/#class-member-functions","text":"Nothing related to Class Member Functions found.","title":"Class Member Functions"},{"location":"SDS_API/class_member_variables/","text":"Class Member Variables a argument ( header_t ) c command ( header_t ) d data_size ( header_t ) s sdsio_id ( header_t )","title":"Class Member Variables"},{"location":"SDS_API/class_member_variables/#class-member-variables","text":"","title":"Class Member Variables"},{"location":"SDS_API/class_member_variables/#a","text":"argument ( header_t )","title":"a"},{"location":"SDS_API/class_member_variables/#c","text":"command ( header_t )","title":"c"},{"location":"SDS_API/class_member_variables/#d","text":"data_size ( header_t )","title":"d"},{"location":"SDS_API/class_member_variables/#s","text":"sdsio_id ( header_t )","title":"s"},{"location":"SDS_API/class_member_typedefs/","text":"Class Member Typedefs Nothing related to Class Member Typedefs found.","title":"Class Member Typedefs"},{"location":"SDS_API/class_member_typedefs/#class-member-typedefs","text":"Nothing related to Class Member Typedefs found.","title":"Class Member Typedefs"},{"location":"SDS_API/class_member_enums/","text":"Class Member Enums Nothing related to Class Member Enums found.","title":"Class Member Enums"},{"location":"SDS_API/class_member_enums/#class-member-enums","text":"Nothing related to Class Member Enums found.","title":"Class Member Enums"},{"location":"SDS_API/namespace_members/","text":"Namespace Members Nothing related to Namespace Members found.","title":"Namespace Members"},{"location":"SDS_API/namespace_members/#namespace-members","text":"Nothing related to Namespace Members found.","title":"Namespace Members"},{"location":"SDS_API/namespace_member_functions/","text":"Namespace Member Functions Nothing related to Namespace Member Functions found.","title":"Namespace Member Functions"},{"location":"SDS_API/namespace_member_functions/#namespace-member-functions","text":"Nothing related to Namespace Member Functions found.","title":"Namespace Member Functions"},{"location":"SDS_API/namespace_member_variables/","text":"Namespace Member Variables Nothing related to Namespace Member Variables found.","title":"Namespace Member Variables"},{"location":"SDS_API/namespace_member_variables/#namespace-member-variables","text":"Nothing related to Namespace Member Variables found.","title":"Namespace Member Variables"},{"location":"SDS_API/namespace_member_typedefs/","text":"Namespace Member Typedefs Nothing related to Namespace Member Typedefs found.","title":"Namespace Member Typedefs"},{"location":"SDS_API/namespace_member_typedefs/#namespace-member-typedefs","text":"Nothing related to Namespace Member Typedefs found.","title":"Namespace Member Typedefs"},{"location":"SDS_API/namespace_member_enums/","text":"Namespace Member Enums Nothing related to Namespace Member Enums found.","title":"Namespace Member Enums"},{"location":"SDS_API/namespace_member_enums/#namespace-member-enums","text":"Nothing related to Namespace Member Enums found.","title":"Namespace Member Enums"},{"location":"SDS_API/functions/","text":"Functions s sdsioInit ( sdsio.h ) sdsioClientInit ( sdsio_client.h ) sdsioClientReceive ( sdsio_client.h ) sdsioClientSend ( sdsio_client.h ) sdsioClientUninit ( sdsio_client.h )","title":"Functions"},{"location":"SDS_API/functions/#functions","text":"","title":"Functions"},{"location":"SDS_API/functions/#s","text":"sdsioInit ( sdsio.h ) sdsioClientInit ( sdsio_client.h ) sdsioClientReceive ( sdsio_client.h ) sdsioClientSend ( sdsio_client.h ) sdsioClientUninit ( sdsio_client.h )","title":"s"},{"location":"SDS_API/macros/","text":"Macros s SDS_BUFFER_ERROR ( sds_buffer.h ) SDS_BUFFER_EVENT_DATA_HIGH ( sds_buffer.h ) SDS_BUFFER_EVENT_DATA_LOW ( sds_buffer.h ) SDS_BUFFER_OK ( sds_buffer.h ) SDS_REC_PLAY_ERROR ( sds_rec_play.h ) SDS_REC_PLAY_ERROR_TIMEOUT ( sds_rec_play.h ) SDS_REC_PLAY_EVENT_IO_ERROR ( sds_rec_play.h ) SDS_REC_PLAY_OK ( sds_rec_play.h ) SDSIO_ERROR ( sdsio.h ) SDSIO_OK ( sdsio.h ) SDSIO_CMD_CLOSE ( sdsio_client.h ) SDSIO_CMD_EOS ( sdsio_client.h ) SDSIO_CMD_OPEN ( sdsio_client.h ) SDSIO_CMD_READ ( sdsio_client.h ) SDSIO_CMD_WRITE ( sdsio_client.h )","title":"Macros"},{"location":"SDS_API/macros/#macros","text":"","title":"Macros"},{"location":"SDS_API/macros/#s","text":"SDS_BUFFER_ERROR ( sds_buffer.h ) SDS_BUFFER_EVENT_DATA_HIGH ( sds_buffer.h ) SDS_BUFFER_EVENT_DATA_LOW ( sds_buffer.h ) SDS_BUFFER_OK ( sds_buffer.h ) SDS_REC_PLAY_ERROR ( sds_rec_play.h ) SDS_REC_PLAY_ERROR_TIMEOUT ( sds_rec_play.h ) SDS_REC_PLAY_EVENT_IO_ERROR ( sds_rec_play.h ) SDS_REC_PLAY_OK ( sds_rec_play.h ) SDSIO_ERROR ( sdsio.h ) SDSIO_OK ( sdsio.h ) SDSIO_CMD_CLOSE ( sdsio_client.h ) SDSIO_CMD_EOS ( sdsio_client.h ) SDSIO_CMD_OPEN ( sdsio_client.h ) SDSIO_CMD_READ ( sdsio_client.h ) SDSIO_CMD_WRITE ( sdsio_client.h )","title":"s"},{"location":"SDS_API/variables/","text":"Variables s sdsRecPlayEvent_t ( sds_rec_play.h )","title":"Variables"},{"location":"SDS_API/variables/#variables","text":"","title":"Variables"},{"location":"SDS_API/variables/#s","text":"sdsRecPlayEvent_t ( sds_rec_play.h )","title":"s"},{"location":"SDS_API/links/","text":"Related Pages Modules Class List Namespace ListNamespace List Namespace Members Namespace Member Functions Namespace Member Variables Namespace Member Typedefs Namespace Member Enumerations Class Index Class Hierarchy Class Members Class Member Functions Class Member Variables Class Member Typedefs Class Member Enumerations Files File Variables File Functions File Macros","title":"Links"}]}