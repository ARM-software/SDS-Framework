/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\defgroup SDS_Buffer SDS Circular Buffer
\brief sds_buffer.h: SDS circular buffer handling for data streams
\details
The **SDS** circular **Buffer** provides an interface for managing circular buffer streams used for efficient
data transfer between software components. It includes functions for opening, closing, reading, writing, clearing,
and monitoring buffer states using event callbacks.

Each buffer stream is represented by an identifier of type sdsBufferId_t, which is obtained via sdsBufferOpen()
and used in subsequent API calls to refer to the corresponding buffer instance.

The buffer operates as a circular FIFO (first-in, first-out) queue. Data written to the buffer via sdsBufferWrite()
is stored until read by sdsBufferRead() or until the buffer is cleared or closed. The buffer supports thresholds
(threshold_low and threshold_high) for monitoring usage levels and triggering user-defined events.

\b Thread \b Safety

The SDS Buffer API is partially thread-safe, with the following constraints:

Thread-safe operations:

- sdsBufferRead()

- sdsBufferWrite()

- sdsBufferGetCount()

These functions may be safely called concurrently, provided they operate on the same buffer instance (sdsBufferId_t). This allows safe producer-consumer models where one thread writes and another reads from the same buffer.

Non-thread-safe operations:

- sdsBufferOpen()

- sdsBufferClose()

- sdsBufferClear()

- sdsBufferRegisterEvents()

These functions must not be called concurrently with each other or with sdsBufferRead() or sdsBufferWrite() for the same buffer. Doing so can lead to undefined behavior or data corruption.
@{
*/

/**
\defgroup SDS_Buffer_Return_Codes Function Return Codes
\brief SDS Buffer Function Return Codes
\details The following values are returned by most `sdsBuffer` functions.
@{
\def SDS_BUFFER_OK
\brief sdsBuffer function execution completed successfully.

\def SDS_BUFFER_ERROR
\brief Error during sdsBuffer function execution.

\def SDS_BUFFER_ERROR_PARAMETER
\brief Error due to invalid parameter passed to an sdsBuffer function.
@}
*/

/**
\defgroup SDS_Buffer_Event_Codes Event Codes
\brief SDS Buffer Event Codes
\details The following values are passed as event value to \ref sdsBufferEvent_t callback function.
@{
\def SDS_BUFFER_EVENT_DATA_LOW
\brief Event signaled when data in circular buffer falls to or below low threshold value.

\def SDS_BUFFER_EVENT_DATA_HIGH
\brief Event signaled when data in circular buffer reaches or exceeds high threshold value.
@}
*/

/**
\typedef sdsBufferId_t
\brief Handle to SDS circular buffer
\details
This *pointer* defines the handle to SDS circular buffer. It is used to identify a circular buffer across the different functions.
*/

/**
\typedef sdsBufferEvent_t
\details
This function is registered by passing a pointer to it as a parameter to the \ref sdsBufferRegisterEvents function. It is invoked when the circular buffer either reaches or exceeds the high data threshold or falls to or below the low data threshold.
The high and low data thresholds are configured using the \ref sdsBufferOpen function.
*/

/**
\fn          sdsBufferId_t sdsBufferOpen (void *buf, uint32_t buf_size, uint32_t threshold_low, uint32_t threshold_high)
\details
Opens the SDS circular buffer for read or write operations.
The function returns the handle to the SDS buffer stream; if the buffer could not be opened, it returns NULL.
*/

/**
\fn          int32_t sdsBufferClose (sdsBufferId_t id)
\details
Closes the SDS circular buffer when read or write operations are no longer required.
*/

/**
\fn          int32_t sdsBufferRegisterEvents (sdsBufferId_t id, sdsBufferEvent_t event_cb, uint32_t event_mask, void *event_arg)
\details
Registers a \ref sdsBufferEvent_t callback function to handle threshold events for the specified SDS buffer.

The `event_mask` parameter specifies which buffer events should trigger the callback. It is a bitmask composed of values from the
\ref SDS_Buffer_Event_Codes enumeration:

  - \ref SDS_BUFFER_EVENT_DATA_LOW
  - \ref SDS_BUFFER_EVENT_DATA_HIGH

When an event matching the mask occurs, the registered `event_cb` function is invoked with `event_arg` as its context.

If `event_cb` is NULL, any previously registered callback for the specified buffer is unregistered.
*/

/**
\fn          int32_t sdsBufferWrite (sdsBufferId_t id, const void *buf, uint32_t buf_size)
\details
Attempts to write up to `buf_size` bytes of data from `buf` to the SDS circular buffer.
If sufficient space is available in the buffer, all data will be written. If only partial space is available,
only the number of bytes that fit will be written. No data is overwritten.
On success, the function returns the number of bytes actually written.
*/

/**
\fn          int32_t sdsBufferRead (sdsBufferId_t id, void *buf, uint32_t buf_size)
\details
Attempts to read up to `buf_size` bytes of data from the SDS circular buffer into a `buf`.
If sufficient data is available, the requested number of bytes will be read. If only partial data is available,
only the available bytes will be read. On success, the function returns the number of bytes actually read or 0 if SDS circular buffer is empty.
*/

/**
\fn          int32_t sdsBufferClear (sdsBufferId_t id)
\details
Clears any data from the SDS circular buffer and resets the circular buffer to empty state.
*/

/**
\fn          int32_t sdsBufferGetCount (sdsBufferId_t id)
\details
Retrieves the number of data bytes currently available in the SDS circular buffer.
*/


/**
@}
*/

// end group SDS_Buffer


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\defgroup SDS_IO_Interface SDS I/O Interface
\brief sdsio.h: SDS I/O Interface for data streams
\details
The SDS I/O interface provides a generic mechanism for reading from and writing to `SDS file`s using several I/O backends.

Interface can operate over:

- A local file system, such as an SD card or semihosting, where files are accessed directly.
- A communication channel such as Ethernet, USB, or UART, where access to files is performed remotely via an SDS I/O Server.

When using a communication channel, the embedded device runs an SDS I/O Client, which communicates with the SDS I/O Server
running on the Host machine. This interaction is command-based (e.g., `SDSIO_CMD_OPEN`, `SDSIO_CMD_READ`, `SDSIO_CMD_WRITE`) and enables
the embedded system to remotely open, read, write, and close files located on the Host. For more details, refer to
[SDSIO Server Protocol](../theory.md#sdsio-server-protocol).

The interface is lightweight and backend-agnostic, making it suitable for embedded data logging, host-interactive tools,
or as a transport layer for higher-level components such as the SDS Recorder and Player.

@{
*/

/**
\defgroup SDS_IO_Return_Codes Function Return Codes
\brief SDS I/O Function Return Codes
\details The following values are returned by most `sdsio` functions.
@{
\def SDSIO_OK
\brief SDS I/O function executed successfully.

\def SDSIO_ERROR
\brief General error during SDS I/O function execution.

\def SDSIO_ERROR_PARAMETER
\brief Invalid parameter passed to an SDS I/O function.

\def SDSIO_ERROR_TIMEOUT
\brief SDS I/O function execution timed out.

\def SDSIO_ERROR_INTERFACE
\brief Error in the SDS I/O interface.

\def SDSIO_ERROR_NO_SERVER
\brief No response from the SDS I/O server.

\def SDSIO_EOS
\brief End of stream reached in SDS I/O read operation.
@}
*/

/**
\typedef sdsioId_t
\brief Handle to SDS I/O data stream
\details
This *pointer* defines the handle to SDS I/O data stream. It is used to identify a data stream across the different functions.
*/

/**
\typedef sdsioMode_t
\details
This *enum* identifies the *read* or *write* mode to SDS I/O data streams.
It is a parameter of the \ref sdsioOpen function.
*/

/**
\fn          int32_t sdsioInit (void)
\details
Initializes the SDS I/O interface. The interface may be a local file system (e.g., an SD card) or semihosting,
or a communication channel such as Ethernet, USB or UART. In the case of a communication channel,
the SDS I/O Client is used to interact with the SDS I/O Server running on a Host machine.
The initialization process includes setting up the communication interface and verifying that
the I/O Server is active on the Host.
*/
int32_t sdsioInit (void);

/**
\fn          int32_t sdsioUninit (void)
\details
De-initializes the SDS I/O interface. If a communication channel such as Ethernet, USB or USART is used,
the corresponding communication interface is also de-initialized.
*/

/**
\fn          sdsioId_t sdsioOpen (const char *name, sdsioMode_t mode)
\details
Opens an SDS I/O stream for reading or writing. If the interface is a local file system or semihosting, the file is opened directly.
For communication channels such as Ethernet, USB or USART, the SDS I/O Client sends an open command (SDSIO_CMD_OPEN) to the SDS I/O Server to open
the file on the Host system. The function returns the handle to the SDS I/O stream; if the I/O stream could not be opened, it returns NULL.
*/

/**
\fn          int32_t sdsioClose (sdsioId_t id)
\details
Closes an SDS I/O stream. If the interface is a local file system or semihosting, the file is closed directly.
For communication channels such as Ethernet, USB or USART, the SDS I/O Client sends a close command (SDSIO_CMD_CLOSE)
to the SDS I/O Server to close the file on the Host system.
*/

/**
\fn          int32_t sdsioWrite (sdsioId_t id, const void *buf, uint32_t buf_size)
\details
Attempts to write up to `buf_size` bytes from the memory pointed to `buf` to the SDS I/O stream identified by `id`.
If the interface is a local file system or semihosting, data is written directly to the file.
For communication channels such as Ethernet, USB or USART, the SDS I/O Client sends a write command (SDSIO_CMD_WRITE) along with the data to
the SDS I/O Server, which then writes the data to a file on the Host system.

The function may return before all data has been written, depending on the available interface bandwidth, buffer capacity, or timeout behavior:

- If the write operation is successful, the function returns the number of bytes actually written. This value may be less than \a buf_size in case of partial write.
- If no data could be written before the operation times out, the function returns \ref SDSIO_ERROR_TIMEOUT.
- If an I/O interface or protocol error occurs, the function returns \ref SDSIO_ERROR or \ref SDSIO_ERROR_INTERFACE.
*/

/**
\fn          int32_t sdsioRead (sdsioId_t id, void *buf, uint32_t buf_size)
\details
Attempts to read up to `buf_size` bytes of data from the SDS I/O stream identified by `id` into the memory pointed to `buf`.
If the interface is a local file system or semihosting, data is read directly from the file.
For communication channels such as Ethernet, USB or USART, the SDS I/O Client sends a read command (SDSIO_CMD_READ) to the SDS I/O Server, which reads
the file on the Host system and returns the data to the Client.

The function attempts to read data and may block based on the behavior of the underlying interface and data availability. It returns under the following conditions:

- If data is available, the function reads up to `buf_size` bytes and returns the number of bytes actually read. This value may be less than `buf_size`.
- If no data becomes available before the timeout expires, the function returns \ref SDSIO_ERROR_TIMEOUT.
- If data is partially read but the timeout occurs before the full request is satisfied, the function returns the number of bytes read up to that point.
- If the end of the stream is reached and no more data remains, the function returns \ref SDSIO_EOS to indicate that the end of file has been reached and no additional data is available.
- If an I/O interface or protocol error occurs, the function returns \ref SDSIO_ERROR or \ref SDSIO_ERROR_INTERFACE.
*/

/**
@}
*/
// end group SDS_IO_Interface


/*=======0=========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1====*/
/**
\defgroup SDS_Recorder_Player SDS Recorder and Player
\brief sds_rec_play.h: SDS Recorder and Player for writing and reading SDS files via communication or file I/O interface.
\details
The **SDS Recorder** and **Player** manage writing to and reading from SDS files through communication or file I/O interfaces.
They support the recording and playback of real-world data for applications such as machine learning and data analysis.
For details on I/O interfaces, refer to chapter [SDS Interface](../sdsio.md#SDSIO_Interface).

The system uses a dedicated worker thread (`sdsRecPlayThread`) to handle file I/O asynchronously. User-facing APIs interact only
with internal circular buffers, allowing efficient, non-blocking data operations.

Each recorder or player stream is identified by a handle of type \ref sdsRecPlayId_t, returned by \ref sdsRecOpen or \ref sdsPlayOpen,
and is required for all subsequent operations on that stream.

\b Thread \b Safety

The SDS Recorder and Player are **thread-safe** for regular operation:

- A single thread may read from or write to a specific stream at a time.
- Multiple streams can be used concurrently by separate threads without conflict.

While operational calls are thread-safe, **improper reuse of closed streams can lead to data corruption**:

- When a stream is closed via \ref sdsRecPlayClose, its internal control block may be **reallocated** if
another stream is opened.
- If a `read` or `write` operation is still pending on a handle after it has been closed, and a new stream is opened
that causes control block reuse, the pending operation may unexpectedly complete on the **newly opened stream**.

To prevent such issues:

- Avoid opening a new stream immediately after closing another unless you can guarantee that all references and asynchronous
operations related to the previous stream have been fully completed or canceled.
@{
*/

/**
\defgroup SDS_Recorder_Player_Return_Codes Function Return Codes
\brief SDS Recorder and Player Function Return Codes
\details The following values are returned by most `sdsRec` and `sdsPlay` functions.
@{
\def SDS_REC_PLAY_OK
\brief SDS Recorder or Player function executed successfully.

\def SDS_REC_PLAY_ERROR
\brief General error during SDS Recorder or Player function execution.

\def SDS_REC_PLAY_ERROR_PARAMETER
\brief Invalid parameter passed to an SDS Recorder or Player function.

\def SDS_REC_PLAY_ERROR_TIMEOUT
\brief SDS Recorder or Player function execution timed out.

\def SDS_REC_PLAY_ERROR_IO
\brief I/O error during SDS Recorder or Player function execution.

\def SDS_REC_ERROR_NO_SPACE
\brief Insufficient space in SDS circular buffer to write the entire data block.

\def SDS_PLAY_ERROR_NO_DATA
\brief Not whole data block is available in the SDS circular buffer.

\def SDS_PLAY_EOS
\brief End of stream reached in SDS Player operation.
@}
*/

/**
\defgroup SDS_Recorder_Player_Event_Codes Event Codes
\brief SDS Recorder and Player Event Codes
\details The following values are passed as event value to \ref sdsRecPlayEvent_t callback function.
@{
\def SDS_REC_PLAY_EVENT_ERROR_IO
\brief Event triggered when an I/O error occurs during recording or playback.

\def SDS_REC_EVENT_ERROR_NO_SPACE
\brief Event triggered when sdsRecWrite() fails due to insufficient space in the SDS circular buffer.

\def SDS_PLAY_EVENT_ERROR_NO_DATA
\brief Event triggered when sdsPlayRead() fails due to insufficient data in the SDS circular buffer.
@}
*/

/**
\typedef sdsRecPlayId_t
\brief Handle to SDS recorder or player stream
\details
This *pointer* defines the handle to SDS recorder or player stream. It is used to identify a data stream across the different functions for
the SDS Recorder and Player system.
*/

/**
\typedef sdsRecPlayEvent_t
\details
This function is registered by passing a pointer to it as a parameter to the \ref sdsRecPlayInit function.
It is invoked when an error happens during recording or playback.
*/

/**
\fn          int32_t sdsRecPlayInit (sdsRecPlayEvent_t event_cb)
\details
Initializes the SDS Recorder and Player system. This function allocates resources, initializes underlying
SDS I/O interface and creates the `sdsRecPlayThread` worker thread. An optional callback function can be
registered to receive notifications (e.g., I/O errors).  This function must be called once before opening
any recorder or player streams.
*/

/**
\fn          int32_t sdsRecPlayUninit (void)
\details
De-initializes the SDS Recorder and Player system. This function terminates the `sdsRecPlayThread` worker thread,
and releases the internal resources. All open recorder or player streams must be closed by the user before calling this function.
After de-initialization, the system must be re-initialized before further use.
*/

/**
\fn          sdsRecPlayId_t sdsRecOpen (const char *name, void *buf, uint32_t buf_size)
\details
Opens a recorder stream for writing timestamps and data blocks to the SDS file. The `buf` parameter specifies
a user-allocated memory region that serves as an internal circular buffer. The buffer must be large enough
to hold at least the largest expected data block plus 8 bytes for the record header.

The `name` parameter defines the base name for the SDS output file and is used to construct the full file name in the
format `name.index.sds`. The `index` is an auto-incrementing value that ensures a unique file name is generated.
If a file with the generated name already exists, the `index` is incremented until an unused name is found.
For details, refer to [Filenames section](../theory.md#filenames).

This function returns a handle that uniquely identifies the stream. The handle is used as a reference in
subsequent function calls to perform operations on the stream.
*/

/**
\fn          int32_t sdsRecClose (sdsRecPlayId_t id)
\details
Closes a recorder stream. Prior to closing, any remaining data in the internal circular buffer is flushed to the SDS file.
The function blocks until all data transfers are complete or a timeout occurs. Upon successful closure, the stream handle
becomes invalid.
*/

/**
\fn          int32_t sdsRecWrite (sdsRecPlayId_t id, uint32_t timestamp, const void *buf, uint32_t buf_size)
\details
Writes a data block, including a header containing the timestamp and data block size, to the internal circular buffer.

The `sdsRecPlayThread` worker thread asynchronously writes the data to the SDS file via the underlying SDS I/O interface.
For an explanation of how the SDS Recorder selects and names the target SDS file, refer to [Filenames section](../theory.md#filenames).
This asynchronous design enables efficient, non-blocking data handling and optimized performance.

Before attempting to write, function verifies that the entire header and the complete data block, provided via the buffer
pointer `buf` and its size `buf_size`, can fit within the available space in the internal SDS circular buffer.
If insufficient space is available, the operation is aborted and the function returns \ref SDS_REC_ERROR_NO_SPACE.

On success, the function writes the header and data block to the SDS circular buffer and returns the number of data bytes written,
excluding the header.

Thread safety is ensured by allowing only a single thread to write to a given stream at a time.
However, multiple threads can concurrently write to different streams, enabling parallel operations across multiple streams.
*/

/**
\fn          sdsRecPlayId_t sdsPlayOpen (const char *name, void *buf, uint32_t buf_size)
\details
Opens a player stream for reading timestamps and data blocks from an SDS file. The `buf` parameter specifies a user-allocated
memory region used as an internal circular buffer. The buffer must be large enough to accommodate the
largest expected data block plus 8 bytes for the record header.

The `name` parameter specifies the base name of the SDS input file. The function attempts to locate and open the file
`<name>.<index>.sds`, where `<index>` is an auto-incrementing value. If no matching file is found, the function returns an error.
For details, refer to [Filenames section](../theory.md#filenames).

This function may block for a period of time while it loads the internal SDS circular buffer with data from the SDS file.

This function returns a handle that uniquely identifies the stream. The handle is used as a reference in subsequent
function calls to perform operations on the stream.
*/

/**
\fn          int32_t sdsPlayClose (sdsRecPlayId_t id)
\details
Closes a player stream. The function waits for all pending data transfers to complete or until a timeout occurs.
Upon successful closure, the stream handle becomes invalid.
*/

/**
\fn          int32_t sdsPlayRead (sdsRecPlayId_t id, uint32_t *timestamp, void *buf, uint32_t buf_size)
\details
Reads a data block along with its associated timestamp from the internal SDS circular buffer.

The `sdsRecPlayThread` worker thread asynchronously reads the data from the SDS file using the underlying SDS I/O interface.
For details on how the specific SDS file is selected, refer to  [Filenames section](../theory.md#filenames).
The retrieved data is then written to the internal SDS circular buffer. This asynchronous design enables efficient,
non-blocking data handling and ensures optimal performance.

Before attempting to read, the function verifies that the entire header and the complete data block specified by the header
are both present in the SDS circular buffer. If either the header is incomplete or the corresponding data block is not yet fully
available, the function aborts and returns \ref SDS_PLAY_ERROR_NO_DATA.

The function verifies that the user-provided buffer `buf`, with size `buf_size`, is large enough to accommodate the entire
data block. If it is too small, the function aborts and returns \ref SDS_REC_PLAY_ERROR_PARAMETER.

If the end of the stream has been reached and no further data is available, the function returns \ref SDS_PLAY_EOS.

On success, the function reads the data block from the circular buffer, stores it in the user-provided buffer, and returns
the the size of the data block in bytes. The associated timestamp is returned via the output parameter `timestamp`.

Thread safety is ensured by allowing only a single thread to read from a given stream at a time.
However, multiple threads can concurrently read from different streams, enabling parallel operations across multiple streams.
*/

/**
\fn          int32_t sdsPlayGetSize (sdsRecPlayId_t id)
\details
Function verifies that the entire header and the complete data block specified by the header are both present in the SDS circular buffer.
It returns the size, in bytes, of the next available data block in the player stream. If either the header is incomplete or the corresponding
data block is not yet fully available, the function returns \ref  SDS_PLAY_ERROR_NO_DATA. If the end of the stream has been reached and no further
data is available, the function returns \ref SDS_PLAY_EOS.
*/


/**
@}
*/
// end group SDS_Recorder_Player
