<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="group__SDS__Recorder__Player" kind="group">
    <compoundname>SDS_Recorder_Player</compoundname>
    <title>SDS Recorder and Player</title>
    <innergroup refid="group__SDS__Recorder__Player__Return__Codes">Function Return Codes</innergroup>
    <innergroup refid="group__SDS__Recorder__Player__Event__Codes">Event Codes</innergroup>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* sdsRecPlayId_t</definition>
        <argsstring></argsstring>
        <name>sdsRecPlayId_t</name>
        <briefdescription>
<para>Handle to SDS recorder or player stream. </para>
        </briefdescription>
        <detaileddescription>
<para>This <emphasis>pointer</emphasis> defines the handle to SDS recorder or player stream. It is used to identify a data stream across the different functions for the SDS Recorder and Player system. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="31" column="14" bodyfile="sds/include/sds_rec_play.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__SDS__Recorder__Player_1gabc0b41916556eb206326e497392e922c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* sdsRecPlayEvent_t) (sdsRecPlayId_t id, uint32_t event)</definition>
        <argsstring>)(sdsRecPlayId_t id, uint32_t event)</argsstring>
        <name>sdsRecPlayEvent_t</name>
        <briefdescription>
<para>Callback function for recorder and player events. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is registered by passing a pointer to it as a parameter to the <ref refid="group__SDS__Recorder__Player_1gac8362dbc509cb878fa330da3a80ee044" kindref="member">sdsRecPlayInit</ref> function. It is invoked when an error happens during recording or playback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref> handle to SDS Recorder/Player stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>event code (see <ref refid="group__SDS__Recorder__Player__Event__Codes" kindref="compound">Event Codes</ref>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="54" column="9" bodyfile="sds/include/sds_rec_play.h" bodystart="54" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__SDS__Recorder__Player_1gac8362dbc509cb878fa330da3a80ee044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sdsRecPlayInit</definition>
        <argsstring>(sdsRecPlayEvent_t event_cb)</argsstring>
        <name>sdsRecPlayInit</name>
        <param>
          <type><ref refid="group__SDS__Recorder__Player_1gabc0b41916556eb206326e497392e922c" kindref="member">sdsRecPlayEvent_t</ref></type>
          <declname>event_cb</declname>
        </param>
        <briefdescription>
<para>Initialize recorder and player. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the SDS Recorder and Player system. This function allocates resources, initializes underlying SDS I/O interface and creates the <computeroutput>sdsRecPlayThread</computeroutput> worker thread. An optional callback function can be registered to receive notifications (e.g., I/O errors). This function must be called once before opening any recorder or player streams.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="group__SDS__Recorder__Player_1gabc0b41916556eb206326e497392e922c" kindref="member">sdsRecPlayEvent_t</ref> callback function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDS_REC_PLAY_OK on success or a negative value on error (see <ref refid="group__SDS__Recorder__Player__Return__Codes" kindref="compound">Function Return Codes</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="63" column="9" declfile="sds/include/sds_rec_play.h" declline="63" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__SDS__Recorder__Player_1ga7e78ce16473390833db5ed3e6efb8cf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sdsRecPlayUninit</definition>
        <argsstring>(void)</argsstring>
        <name>sdsRecPlayUninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Uninitialize recorder and player. </para>
        </briefdescription>
        <detaileddescription>
<para>De-initializes the SDS Recorder and Player system. This function terminates the <computeroutput>sdsRecPlayThread</computeroutput> worker thread, and releases the internal resources. All open recorder or player streams must be closed by the user before calling this function. After de-initialization, the system must be re-initialized before further use.</para>
<para><simplesect kind="return"><para>SDS_REC_PLAY_OK on success or a negative value on error (see <ref refid="group__SDS__Recorder__Player__Return__Codes" kindref="compound">Function Return Codes</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="71" column="9" declfile="sds/include/sds_rec_play.h" declline="71" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__SDS__Recorder__Player_1ga23cdde344f40bcc5d06931473bb8b719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref></type>
        <definition>sdsRecPlayId_t sdsRecOpen</definition>
        <argsstring>(const char *name, void *buf, uint32_t buf_size)</argsstring>
        <name>sdsRecOpen</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Open recorder stream (write mode). </para>
        </briefdescription>
        <detaileddescription>
<para>Opens a recorder stream for writing timestamps and data blocks to the SDS file. The <computeroutput>buf</computeroutput> parameter specifies a user-allocated memory region that serves as an internal circular buffer. The buffer must be large enough to hold at least the largest expected data block plus 8 bytes for the record header.</para>
<para>The <computeroutput>name</computeroutput> parameter defines the base name for the SDS output file and is used to construct the full file name in the format <computeroutput>name.index.sds</computeroutput>. The <computeroutput>index</computeroutput> is an auto-incrementing value that ensures a unique file name is generated. If a file with the generated name already exists, the <computeroutput>index</computeroutput> is incremented until an unused name is found. For details, refer to <ulink url="../theory.md#filenames">Filenames section</ulink>.</para>
<para>This function returns a handle that uniquely identifies the stream. The handle is used as a reference in subsequent function calls to perform operations on the stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>stream name (pointer to NULL terminated string) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to buffer for recorder stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref> handle to SDS Recorder/Player stream, or NULL if operation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="81" column="16" declfile="sds/include/sds_rec_play.h" declline="81" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__SDS__Recorder__Player_1ga7b010ae467e0ad6cdfb97569da2597a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sdsRecClose</definition>
        <argsstring>(sdsRecPlayId_t id)</argsstring>
        <name>sdsRecClose</name>
        <param>
          <type><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Close recorder stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Closes a recorder stream. Prior to closing, any remaining data in the internal circular buffer is flushed to the SDS file. The function blocks until all data transfers are complete or a timeout occurs. Upon successful closure, the stream handle becomes invalid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref> handle to SDS Recorder/Player stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDS_REC_PLAY_OK on success or a negative value on error (see <ref refid="group__SDS__Recorder__Player__Return__Codes" kindref="compound">Function Return Codes</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="90" column="9" declfile="sds/include/sds_rec_play.h" declline="90" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__SDS__Recorder__Player_1gad1f1655942d66149438082b55702d09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sdsRecWrite</definition>
        <argsstring>(sdsRecPlayId_t id, uint32_t timestamp, const void *buf, uint32_t buf_size)</argsstring>
        <name>sdsRecWrite</name>
        <param>
          <type><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Write entire data block along with its timestamp to the recorder stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Writes a data block, including a header containing the timestamp and data block size, to the internal circular buffer.</para>
<para>The <computeroutput>sdsRecPlayThread</computeroutput> worker thread asynchronously writes the data to the SDS file via the underlying SDS I/O interface. For an explanation of how the SDS Recorder selects and names the target SDS file, refer to <ulink url="../theory.md#filenames">Filenames section</ulink>. This asynchronous design enables efficient, non-blocking data handling and optimized performance.</para>
<para>Before attempting to write, function verifies that the entire header and the complete data block, provided via the buffer pointer <computeroutput>buf</computeroutput> and its size <computeroutput>buf_size</computeroutput>, can fit within the available space in the internal SDS circular buffer. If insufficient space is available, the operation is aborted and the function returns <ref refid="group__SDS__Recorder__Player__Return__Codes_1gaec236d96148d04e6f243266ed233685d" kindref="member">SDS_REC_ERROR_NO_SPACE</ref>.</para>
<para>On success, the function writes the header and data block to the SDS circular buffer and returns the number of data bytes written, excluding the header.</para>
<para>Thread safety is ensured by allowing only a single thread to write to a given stream at a time. However, multiple threads can concurrently write to different streams, enabling parallel operations across multiple streams.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref> handle to SDS Recorder/Player stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>timestamp in ticks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data block buffer to be written </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the data block buffer in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes successfully written or a negative value on error (see <ref refid="group__SDS__Recorder__Player__Return__Codes" kindref="compound">Function Return Codes</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="102" column="9" declfile="sds/include/sds_rec_play.h" declline="102" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__SDS__Recorder__Player_1ga22965fa58400c58e13376134bf1eafa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref></type>
        <definition>sdsRecPlayId_t sdsPlayOpen</definition>
        <argsstring>(const char *name, void *buf, uint32_t buf_size)</argsstring>
        <name>sdsPlayOpen</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Open player stream (read mode). </para>
        </briefdescription>
        <detaileddescription>
<para>Opens a player stream for reading timestamps and data blocks from an SDS file. The <computeroutput>buf</computeroutput> parameter specifies a user-allocated memory region used as an internal circular buffer. The buffer must be large enough to accommodate the largest expected data block plus 8 bytes for the record header.</para>
<para>The <computeroutput>name</computeroutput> parameter specifies the base name of the SDS input file. The function attempts to locate and open the file <computeroutput>&lt;name&gt;.&lt;index&gt;.sds</computeroutput>, where <computeroutput>&lt;index&gt;</computeroutput> is an auto-incrementing value. If no matching file is found, the function returns an error. For details, refer to <ulink url="../theory.md#filenames">Filenames section</ulink>.</para>
<para>This function may block for a period of time while it loads the internal SDS circular buffer with data from the SDS file.</para>
<para>This function returns a handle that uniquely identifies the stream. The handle is used as a reference in subsequent function calls to perform operations on the stream.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>stream name (pointer to NULL terminated string) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to buffer for player stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref> handle to SDS Recorder/Player stream, or NULL if operation failed </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="112" column="16" declfile="sds/include/sds_rec_play.h" declline="112" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__SDS__Recorder__Player_1gabaef35fad3049663a108750c2561e8ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sdsPlayClose</definition>
        <argsstring>(sdsRecPlayId_t id)</argsstring>
        <name>sdsPlayClose</name>
        <param>
          <type><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Close player stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Closes a player stream. The function waits for all pending data transfers to complete or until a timeout occurs. Upon successful closure, the stream handle becomes invalid.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref> handle to SDS Recorder/Player stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SDS_REC_PLAY_OK on success or a negative value on error (see <ref refid="group__SDS__Recorder__Player__Return__Codes" kindref="compound">Function Return Codes</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="121" column="9" declfile="sds/include/sds_rec_play.h" declline="121" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__SDS__Recorder__Player_1ga219c99e93cedd38573cb0aba5d0fcc75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sdsPlayRead</definition>
        <argsstring>(sdsRecPlayId_t id, uint32_t *timestamp, void *buf, uint32_t buf_size)</argsstring>
        <name>sdsPlayRead</name>
        <param>
          <type><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buf_size</declname>
        </param>
        <briefdescription>
<para>Read entire data block along with its timestamp from the player stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads a data block along with its associated timestamp from the internal SDS circular buffer.</para>
<para>The <computeroutput>sdsRecPlayThread</computeroutput> worker thread asynchronously reads the data from the SDS file using the underlying SDS I/O interface. For details on how the specific SDS file is selected, refer to <ulink url="../theory.md#filenames">Filenames section</ulink>. The retrieved data is then written to the internal SDS circular buffer. This asynchronous design enables efficient, non-blocking data handling and ensures optimal performance.</para>
<para>Before attempting to read, the function verifies that the entire header and the complete data block specified by the header are both present in the SDS circular buffer. If either the header is incomplete or the corresponding data block is not yet fully available, the function aborts and returns <ref refid="group__SDS__Recorder__Player__Return__Codes_1ga7627fcc15ffcbb250b53c789b6472716" kindref="member">SDS_PLAY_ERROR_NO_DATA</ref>.</para>
<para>The function verifies that the user-provided buffer <computeroutput>buf</computeroutput>, with size <computeroutput>buf_size</computeroutput>, is large enough to accommodate the entire data block. If it is too small, the function aborts and returns <ref refid="group__SDS__Recorder__Player__Return__Codes_1gaa504ea1fbf3f41f7eb9bda4b26bae8cd" kindref="member">SDS_REC_PLAY_ERROR_PARAMETER</ref>.</para>
<para>If the end of the stream has been reached and no further data is available, the function returns <ref refid="group__SDS__Recorder__Player__Return__Codes_1gae3df9b49d72ae4584cbb3db45948dc3b" kindref="member">SDS_PLAY_EOS</ref>.</para>
<para>On success, the function reads the data block from the circular buffer, stores it in the user-provided buffer, and returns the the size of the data block in bytes. The associated timestamp is returned via the output parameter <computeroutput>timestamp</computeroutput>.</para>
<para>Thread safety is ensured by allowing only a single thread to read from a given stream at a time. However, multiple threads can concurrently read from different streams, enabling parallel operations across multiple streams.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref> handle to SDS Recorder/Player stream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to buffer for a timestamp in ticks </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data block buffer to be read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the data block buffer in bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes successfully read, or a negative value on error or EOS (see <ref refid="group__SDS__Recorder__Player__Return__Codes" kindref="compound">Function Return Codes</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="133" column="9" declfile="sds/include/sds_rec_play.h" declline="133" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__SDS__Recorder__Player_1ga8195b2eb0f3a3988928eb3a577441ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sdsPlayGetSize</definition>
        <argsstring>(sdsRecPlayId_t id)</argsstring>
        <name>sdsPlayGetSize</name>
        <param>
          <type><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get data block size from Player stream. </para>
        </briefdescription>
        <detaileddescription>
<para>Function verifies that the entire header and the complete data block specified by the header are both present in the SDS circular buffer. It returns the size, in bytes, of the next available data block in the player stream. If either the header is incomplete or the corresponding data block is not yet fully available, the function returns <ref refid="group__SDS__Recorder__Player__Return__Codes_1ga7627fcc15ffcbb250b53c789b6472716" kindref="member">SDS_PLAY_ERROR_NO_DATA</ref>. If the end of the stream has been reached and no further data is available, the function returns <ref refid="group__SDS__Recorder__Player__Return__Codes_1gae3df9b49d72ae4584cbb3db45948dc3b" kindref="member">SDS_PLAY_EOS</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref> handle to SDS Recorder/Player stream </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes in next available data block, or a negative value on error or EOS (see <ref refid="group__SDS__Recorder__Player__Return__Codes" kindref="compound">Function Return Codes</ref>) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sds/include/sds_rec_play.h" line="142" column="9" declfile="sds/include/sds_rec_play.h" declline="142" declcolumn="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="sds__rec__play_8h_source" kindref="compound">sds_rec_play.h</ref>: SDS Recorder and Player for writing and reading SDS files via communication or file I/O interface. </para>
    </briefdescription>
    <detaileddescription>
<para>The <bold>SDS Recorder</bold> and <bold>Player</bold> manage writing to and reading from SDS files through communication or file I/O interfaces. They support the recording and playback of real-world data for applications such as machine learning and data analysis. Refer to the chapter <emphasis>SDS Interface</emphasis> for an overview.</para>
<para>The system uses a dedicated worker thread (<computeroutput>sdsRecPlayThread</computeroutput>) to handle file I/O asynchronously. User-facing APIs interact only with internal circular buffers, allowing efficient, non-blocking data operations.</para>
<para>Each recorder or player stream is identified by a handle of type <ref refid="group__SDS__Recorder__Player_1ga91a6334159e31346891a3d21db5c5d37" kindref="member">sdsRecPlayId_t</ref>, returned by <ref refid="group__SDS__Recorder__Player_1ga23cdde344f40bcc5d06931473bb8b719" kindref="member">sdsRecOpen</ref> or <ref refid="group__SDS__Recorder__Player_1ga22965fa58400c58e13376134bf1eafa8" kindref="member">sdsPlayOpen</ref>, and is required for all subsequent operations on that stream.</para>
<para><bold>Thread</bold> <bold>Safety</bold> </para>
<para>The SDS Recorder and Player are <bold>thread-safe</bold> for regular operation:</para>
<para><itemizedlist>
<listitem><para>A single thread may read from or write to a specific stream at a time.</para>
</listitem><listitem><para>Multiple streams can be used concurrently by separate threads without conflict.</para>
</listitem></itemizedlist>
</para>
<para>While operational calls are thread-safe, <bold>improper reuse of closed streams can lead to data corruption</bold>:</para>
<para><itemizedlist>
<listitem><para>When a stream is closed via sdsRecPlayClose, its internal control block may be <bold>reallocated</bold> if another stream is opened.</para>
</listitem><listitem><para>If a <computeroutput>read</computeroutput> or <computeroutput>write</computeroutput> operation is still pending on a handle after it has been closed, and a new stream is opened that causes control block reuse, the pending operation may unexpectedly complete on the <bold>newly opened stream</bold>.</para>
</listitem></itemizedlist>
</para>
<para>To prevent such issues:</para>
<para><itemizedlist>
<listitem><para>Avoid opening a new stream immediately after closing another unless you can guarantee that all references and asynchronous operations related to the previous stream have been fully completed or canceled. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
